"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("./Error.js"),r=require("./chains/index.js"),t=require("./embedded/EmbeddedWalletProvider.js"),i=require("./embedded/EmbeddedSolanaWalletProvider.js"),o=require("./embedded/EmbeddedWalletProxy.js"),s=require("./embedded/EmbeddedBitcoinWalletProvider.js"),d=require("./embedded/errors.js"),a=require("./embedded/utils/index.js");require("./chains/arbitrum.js"),require("./chains/arbitrumGoerli.js"),require("./chains/arbitrumSepolia.js"),require("./chains/avalanche.js"),require("./chains/avalancheFuji.js"),require("./chains/base.js"),require("./chains/baseGoerli.js"),require("./chains/baseSepolia.js"),require("./chains/berachainArtio.js"),require("./chains/celo.js"),require("./chains/celoAlfajores.js"),require("./chains/filecoin.js"),require("./chains/filecoinCalibration.js"),require("./chains/garnetHolesky.js"),require("./chains/goerli.js"),require("./chains/holesky.js"),require("./chains/linea.js"),require("./chains/lineaTestnet.js"),require("./chains/mainnet.js"),require("./chains/optimism.js"),require("./chains/optimismGoerli.js"),require("./chains/optimismSepolia.js"),require("./chains/polygon.js"),require("./chains/polygonMumbai.js"),require("./chains/redstone.js"),require("./chains/redstoneHolesky.js"),require("./chains/sepolia.js"),require("./chains/zora.js"),require("./chains/zoraSepolia.js"),require("./chains/zoraTestnet.js"),require("eventemitter3"),require("./embedded/methods.js"),require("./embedded/EventCallbackQueue.js"),require("./embedded/withMfa.js"),require("./embedded/types.js"),require("@ethersproject/abstract-signer"),require("@ethersproject/providers"),require("./embedded/gas/arbitrum.js"),require("@ethersproject/bignumber"),require("./embedded/utils/ethers.js"),require("./embedded/gas/bsc.js"),require("./embedded/gas/op-stack.js"),require("@ethersproject/contracts"),require("@ethersproject/transactions"),require("./embedded/gas/polygon.js"),require("@ethersproject/units"),require("fetch-retry"),require("./chains/polygonAmoy.js"),require("./embedded/utils/gas.js");exports.default=class{_privyInternal;_proxy;_chains=Array.from(r.DEFAULT_SUPPORTED_CHAINS);_mfa;_mfaPromises;constructor(e,r,t,i,s){this._privyInternal=e,r&&(this._proxy=new o.EmbeddedWalletProxy(r,s),i.setProxy(this._proxy)),t&&(this._chains=t),this._mfa=i,this._mfaPromises=s}setMessagePoster(e){this._proxy=new o.EmbeddedWalletProxy(e,this._mfaPromises),this._mfa.setProxy(this._proxy)}async add(r){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");const t=await this._privyInternal.getAccessToken();if(!t)throw new e.PrivyClientError({error:"User must be logged in to create an embedded wallet",code:"embedded_wallet_creation_error"});await this._proxy.addWallet({accessToken:t,...r});const{user:i}=await this._privyInternal.refreshSession();return{user:i}}async getBitcoinProvider({wallet:e,entropyId:r,entropyIdVerifier:t,recoveryPassword:i,recoveryAccessToken:o,recoverySecretOverride:d}){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");if(!await this._privyInternal.getAccessToken())throw new Error("User must be logged in to create an embedded wallet");return await this._load({entropyId:r,entropyIdVerifier:t,wallet:e,recoveryPassword:i,recoveryAccessToken:o,recoverySecretOverride:d}),new s.EmbeddedBitcoinWalletProvider({account:e,privyInternal:this._privyInternal,proxy:this._proxy,entropyId:r,entropyIdVerifier:t})}async create(e,r,i,o,s,d){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");let a;if(a=r||(e?"user-passcode":"privy"),e&&"string"!=typeof e)throw new Error("Invalid recovery password, must be a string");if("privy"===a&&this._privyInternal.config?.embedded_wallet_config.require_user_password_on_create)throw new Error("Password not provided yet is required by App configuration");const n=await this._privyInternal.getAccessToken();if(!n)throw new Error("User must be logged in to create an embedded wallet");const{address:c}=await this._proxy.create({accessToken:n,recoveryMethod:a,recoveryPassword:e,recoveryAccessToken:i,recoverySecretOverride:o,iCloudRecordNameOverride:s,solanaAddress:d?.address});if(!c)throw new Error("Failed to create wallet");const{user:l}=await this._privyInternal.refreshSession();return{user:l,provider:new t.EmbeddedWalletProvider({address:c,privyInternal:this._privyInternal,chains:this._chains,walletProxy:this._proxy})}}async createSolana(r){if(!this._proxy)throw new e.PrivyClientError({error:"Embedded wallet proxy not initialized",code:"embedded_wallet_creation_error"});const t=await this._privyInternal.getAccessToken();if(!t)throw new e.PrivyClientError({error:"User must be logged in to create an embedded wallet",code:"embedded_wallet_creation_error"});r?.ethereumAccount&&await this.getProvider(r.ethereumAccount);const{publicKey:o}=await this._proxy.createSolana({accessToken:t,ethereumAddress:r?.ethereumAccount?.address});if(!o)throw new e.PrivyClientError({error:"Failed to create wallet",code:"embedded_wallet_creation_error"});const{user:s}=await this._privyInternal.refreshSession();return{user:s,provider:new i.EmbeddedSolanaWalletProvider({proxy:this._proxy,privyInternal:this._privyInternal,entropyId:r?.ethereumAccount?.address??o,entropyIdVerifier:r?.ethereumAccount?.address?"ethereum-address-verifier":"solana-address-verifier",publicKey:o,hdWalletIndex:0})}}async createAdditionalSolana({primaryPublicKey:r,hdWalletIndex:t}){if(!this._proxy)throw new e.PrivyClientError({error:"Embedded wallet proxy not initialized",code:"embedded_wallet_creation_error"});const o=await this._privyInternal.getAccessToken();if(!o)throw new e.PrivyClientError({error:"User must be logged in to create an embedded wallet",code:"embedded_wallet_creation_error"});const{publicKey:s}=await this._proxy.createAdditionalSolana({accessToken:o,primaryPublicKey:r,hdWalletIndex:t});if(!s)throw new e.PrivyClientError({error:"Failed to create wallet",code:"embedded_wallet_creation_error"});const{user:d}=await this._privyInternal.refreshSession();return{user:d,provider:new i.EmbeddedSolanaWalletProvider({proxy:this._proxy,privyInternal:this._privyInternal,entropyId:r,entropyIdVerifier:"solana-address-verifier",publicKey:s,hdWalletIndex:t})}}async hasEmbeddedWallet(){const{user:e,token:r}=await this._privyInternal.refreshSession();if(!e||!r)throw new Error("User must be logged in to interact with embedded wallets");return!!this._getEmbeddedWallet(e)}async isPasswordRequired(){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");const{user:e,token:r}=await this._privyInternal.refreshSession();if(!e||!r)throw new Error("User must be logged in to interact with embedded wallets");const t=this._getEmbeddedWallet(e);if(!t)return!1;if("privy"===t.recovery_method)return!1;try{return await this._proxy.connect({accessToken:r,entropyId:t.address,entropyIdVerifier:"ethereum-address-verifier"}),!1}catch(e){return d.errorIndicatesRecoveryIsNeeded(e)}}async getProvider(e,r,i,o){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");const s=await this._load({wallet:e,entropyId:e.address,entropyIdVerifier:"ethereum-address-verifier",recoveryPassword:r,recoveryAccessToken:i,recoverySecretOverride:o});return new t.EmbeddedWalletProvider({address:s,privyInternal:this._privyInternal,chains:this._chains,walletProxy:this._proxy})}async getSolanaProvider(r,t,o,s,d,a){if(!this._proxy)throw new e.PrivyClientError({error:"Embedded wallet proxy not initialized",code:"embedded_wallet_webview_not_loaded"});return await this._load({wallet:r,entropyId:t,entropyIdVerifier:o,recoveryPassword:s,recoveryAccessToken:d,recoverySecretOverride:a}),new i.EmbeddedSolanaWalletProvider({publicKey:r.address,privyInternal:this._privyInternal,proxy:this._proxy,entropyId:t,entropyIdVerifier:o,hdWalletIndex:r.wallet_index})}async setPassword(e,r){const{provider:t}=await this.setRecovery({wallet:e,recoveryMethod:"user-passcode",password:r});return t}async setRecovery(e){const{wallet:r,...i}=e;if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");a.throwIfInvalidRecoveryUpgradePath({currentRecoveryMethod:r.recovery_method,upgradeToRecoveryMethod:"icloud-native"===i.recoveryMethod?"icloud":i.recoveryMethod}),await this._load("solana"===r.chain_type?{wallet:r,entropyId:r.address,entropyIdVerifier:"solana-address-verifier"}:{wallet:r,entropyId:r.address,entropyIdVerifier:"ethereum-address-verifier"});const o=await this._privyInternal.getAccessToken();if(!o)throw new Error("User must be logged in to interact with embedded wallets");const s=r.recovery_method;this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_set_recovery_started",{address:r.address,target_recovery_method:i.recoveryMethod,existing_recovery_method:s});try{let e;if("user-passcode"===i.recoveryMethod)e={recoveryMethod:"user-passcode",recoveryPassword:i.password};else if("google-drive"===i.recoveryMethod)e={recoveryMethod:"google-drive",recoveryAccessToken:i.recoveryAccessToken};else if("icloud"===i.recoveryMethod)e={recoveryMethod:"icloud",recoveryAccessToken:i.recoveryAccessToken};else if("icloud-native"===i.recoveryMethod)e={recoveryMethod:"icloud-native",iCloudRecordNameOverride:i.iCloudRecordNameOverride,recoverySecretOverride:i.recoverySecretOverride};else{if("privy"!==i.recoveryMethod)throw new Error(`Unknown recovery method: ${i.recoveryMethod}`);e={recoveryMethod:"privy"}}await this._proxy.setRecovery({accessToken:o,entropyId:r.address,entropyIdVerifier:"solana"===r.chain_type?"solana-address-verifier":"ethereum-address-verifier",...e}),this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_set_recovery_completed",{address:r.address,target_recovery_method:i.recoveryMethod,existing_recovery_method:s});const{user:d}=await this._privyInternal.refreshSession();return{user:d,provider:"ethereum"!==r.chain_type?null:new t.EmbeddedWalletProvider({address:r.address,privyInternal:this._privyInternal,chains:this._chains,walletProxy:this._proxy})}}catch(e){throw this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_set_recovery_failed",{address:r.address,recovery_method:r.recovery_method,error:e instanceof Error?e.message:"Unable to recover wallet"}),e}}getURL(){const e=new URL(`${this._privyInternal.baseUrl}/apps/${this._privyInternal.appId}/embedded-wallets`);return this._privyInternal.caid&&e.searchParams.append("caid",this._privyInternal.caid),this._privyInternal.appClientId&&e.searchParams.append("client_id",this._privyInternal.appClientId),e.href}get chains(){return this._chains}getMessageHandler(){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");return this._proxy.handleEmbeddedWalletMessages.bind(this._proxy)}onMessage(e){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");return this._proxy.handleEmbeddedWalletMessages(e)}async ping(e){try{if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");return await this._proxy.ping(e),!0}catch(e){return console.error(e),!1}}async _load({entropyId:e,entropyIdVerifier:r,wallet:t,recoveryPassword:i,recoveryAccessToken:o,recoverySecretOverride:s}){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");const a=await this._privyInternal.getAccessToken();if(!a)throw new Error("User must be logged in to interact with embedded wallets");try{return await this._proxy.connect({accessToken:a,entropyId:e,entropyIdVerifier:r}),e}catch(n){if(d.errorIndicatesRecoveryIsNeeded(n)){try{if("privy"===t.recovery_method){this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_started",{address:t.address,recovery_method:t.recovery_method});const i=await this._proxy.recover({accessToken:a,entropyId:e,entropyIdVerifier:r});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_completed",{address:t.address,recovery_method:t.recovery_method}),i.entropyId}if("user-passcode"===t.recovery_method&&i){this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_started",{address:t.address,recovery_method:t.recovery_method});const o=await this._proxy.recover({accessToken:a,recoveryPassword:i,entropyId:e,entropyIdVerifier:r});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_completed",{address:t.address,recovery_method:t.recovery_method}),o.entropyId}if(["google-drive","icloud"].includes(t.recovery_method)&&o){this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_started",{address:t.address,recovery_method:t.recovery_method});const i=await this._proxy.recover({accessToken:a,recoveryAccessToken:o,entropyId:e,entropyIdVerifier:r});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_completed",{address:t.address,recovery_method:t.recovery_method}),i.entropyId}if("icloud"===t.recovery_method&&s){this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_started",{address:t.address,recovery_method:"icloud-native"});const i=await this._proxy.recover({accessToken:a,recoverySecretOverride:s,entropyId:e,entropyIdVerifier:r});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_completed",{address:t.address,recovery_method:"icloud-native"}),i.entropyId}}catch(r){throw this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_failed",{address:t.address,recovery_method:t.recovery_method,error:r instanceof Error?r.message:`Unable to recover wallet: ${e}`}),r}throw n}throw n}}_getEmbeddedWallet(e){return e?.linked_accounts.find((e=>"wallet"===e.type&&"embedded"===e.connector_type&&"privy"===e.wallet_client_type))}};
