"use strict";var r=require("@ethersproject/abstract-signer"),e=require("@ethersproject/providers"),t=require("../errors.js"),i=require("../gas/arbitrum.js"),s=require("../gas/bsc.js"),a=require("../gas/op-stack.js"),o=require("../gas/polygon.js"),n=require("./gas.js");require("../types.js"),require("@ethersproject/bignumber"),require("../../chains/arbitrum.js"),require("../../chains/arbitrumGoerli.js"),require("../../chains/arbitrumSepolia.js"),require("./ethers.js"),require("@ethersproject/contracts"),require("@ethersproject/transactions"),require("../../chains/base.js"),require("../../chains/baseGoerli.js"),require("../../chains/baseSepolia.js"),require("../../chains/optimism.js"),require("../../chains/optimismGoerli.js"),require("../../chains/optimismSepolia.js"),require("../../chains/zora.js"),require("../../chains/zoraSepolia.js"),require("../../chains/zoraTestnet.js"),require("@ethersproject/units"),require("fetch-retry"),require("../../chains/polygon.js"),require("../../chains/polygonAmoy.js"),require("../../chains/polygonMumbai.js");function c(r){return/^-?0x[a-f0-9]+$/i.test(r)}function p(r){const e="number"==typeof r,t="bigint"==typeof r,i="string"==typeof r&&c(r);return e||t||i}function u(r){const e=["gasLimit","gasPrice","value","maxPriorityFeePerGas","maxFeePerGas"];for(const t of e){const e=r[t];if(void 0!==e&&!p(e))throw new Error(`Transaction request property '${t}' must be a valid number, bigint, or hex string representing a quantity`)}if("number"!=typeof r.chainId)throw new Error("Transaction request property 'chainId' must be a number")}exports.getJsonRpcEndpointFromChain=(r,e,i)=>{const s=r.id,a=Number(r.id);let o;if(r.rpcUrls.privyWalletOverride&&r.rpcUrls.privyWalletOverride.http[0])o=r.rpcUrls.privyWalletOverride.http[0];else if(e.rpcUrls&&e.rpcUrls[a])o=e.rpcUrls[a];else if(r.rpcUrls.privy?.http[0]){const e=new URL(r.rpcUrls.privy.http[0]);e.searchParams.append("privyAppId",i),o=e.toString()}else o=r.rpcUrls.public?.http[0]?r.rpcUrls.public.http[0]:r.rpcUrls.default?.http[0];if(!o)throw new t.PrivyConnectorError(`No RPC url found for ${s}`);return o},exports.getJsonRpcProvider=(r,i,s,a)=>{const o=Number(r),n=i.find((r=>r.id===o));if(!n)throw new t.PrivyConnectorError(`Unsupported chainId ${r}`,4901);let c;if(c=n.rpcUrls.privyWalletOverride&&n.rpcUrls.privyWalletOverride.http[0]?new e.StaticJsonRpcProvider(n.rpcUrls.privyWalletOverride.http[0]):s.rpcUrls&&s.rpcUrls[o]?new e.StaticJsonRpcProvider(s.rpcUrls[o]):n.rpcUrls.privy?.http[0]?new e.StaticJsonRpcProvider({url:n.rpcUrls.privy.http[0],headers:{"privy-app-id":a.appId}}):n.rpcUrls.public?.http[0]?new e.StaticJsonRpcProvider(n.rpcUrls.public?.http[0]):new e.StaticJsonRpcProvider(n.rpcUrls.default?.http[0]),!c)throw new t.PrivyConnectorError(`No RPC url found for ${r}`);return c},exports.populateTransactionRequest=async function(e,t,p){if(t.chainId=Number(t.chainId),u(t),t.from||(t.from=e),!t.nonce){const i=new r.VoidSigner(e,p);t.nonce=await i.getTransactionCount("pending")}return t.gasLimit||(t.gas?(t.gasLimit=t.gas,delete t.gas):t.gasLimit=await n.defaultGasLimit(t,p)),"string"==typeof t.type&&c(t.type)&&(t.type=Number(t.type)),[23294,23295].includes(t.chainId)&&(t.type=0),0===(t=o.isPolygon(t.chainId)?await o.defaultGasForPolygon(t):i.isArbitrum(t.chainId)?await i.defaultGasForArbitrum(t,p):a.isOpStack(t.chainId)?await a.defaultGasForOpStack(t,p):s.isBsc(t.chainId)?await s.defaultGasForBsc(t,p):await n.defaultGasForEvmChain(t,p)).type&&delete t.accessList,2!==t.type&&(delete t.maxPriorityFeePerGas,delete t.maxFeePerGas),t},exports.throwIfInvalidRecoveryUpgradePath=function({currentRecoveryMethod:r,upgradeToRecoveryMethod:e}){switch(r){case"privy":case"user-passcode":return!0;case"icloud":case"google-drive":if(r===e)throw new Error("Cannot upgrade to the existing cloud platform");return!0;default:throw new Error("Unknown recovery method")}},exports.validateTransactionRequest=u;
