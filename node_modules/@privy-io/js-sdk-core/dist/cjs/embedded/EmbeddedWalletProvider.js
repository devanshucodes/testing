"use strict";var e=require("eventemitter3"),r=require("../Error.js"),s=require("./errors.js"),t=require("./methods.js"),a=require("./utils/index.js");require("./types.js"),require("@ethersproject/abstract-signer"),require("@ethersproject/providers"),require("./gas/arbitrum.js"),require("@ethersproject/bignumber"),require("../chains/arbitrum.js"),require("../chains/arbitrumGoerli.js"),require("../chains/arbitrumSepolia.js"),require("./utils/ethers.js"),require("./gas/bsc.js"),require("./gas/op-stack.js"),require("@ethersproject/contracts"),require("@ethersproject/transactions"),require("../chains/base.js"),require("../chains/baseGoerli.js"),require("../chains/baseSepolia.js"),require("../chains/optimism.js"),require("../chains/optimismGoerli.js"),require("../chains/optimismSepolia.js"),require("../chains/zora.js"),require("../chains/zoraSepolia.js"),require("../chains/zoraTestnet.js"),require("./gas/polygon.js"),require("@ethersproject/units"),require("fetch-retry"),require("../chains/polygon.js"),require("../chains/polygonAmoy.js"),require("../chains/polygonMumbai.js"),require("./utils/gas.js");exports.EmbeddedWalletProvider=class extends e{_walletProxy;_privyInternal;_address;_chainId;_chains;_jsonRpcProvider;constructor({walletProxy:e,privyInternal:r,address:s,chains:t,chainId:i=t[0].id}){super(),this._walletProxy=e,this._privyInternal=r,this._address=s,this._chainId=i,this._chains=t,this._jsonRpcProvider=a.getJsonRpcProvider(i,t,{rpcUrls:[]},{appId:this._privyInternal.appId})}async request(e){if(t.isSupportedIframeRpcMethod(e.method))return this.handleIFrameRpc(e);switch(e.method){case"eth_accounts":case"eth_requestAccounts":return this._address?[this._address]:[];case"eth_chainId":return`0x${this._chainId.toString(16)}`;case"wallet_switchEthereumChain":return this.handleSwitchEthereumChain(e);case"eth_estimateGas":return this.handleEstimateGas(e);case"eth_sendTransaction":{const r=e.params?.[0];return this.handleSendTransaction(r)}case"eth_populateTransactionRequest":{const r=e.params?.[0];return this.handlePopulateTransaction(r)}default:return this.handleJsonRpc(e)}}ensureChainId(e){const r={chainId:this._chainId,...e};return this.internalSwitchEthereumChain(r.chainId),r}internalSwitchEthereumChain(e){e&&Number(e)!==this._chainId&&(this._chainId=Number(e),this._jsonRpcProvider=a.getJsonRpcProvider(this._chainId,this._chains,{rpcUrls:[]},{appId:this._privyInternal.appId}),this.emit("chainChanged",e))}async handlePopulateTransaction(e){const r=this.ensureChainId(e);return a.populateTransactionRequest(this._address,r,this._jsonRpcProvider)}async handleSendTransaction(e){const r=this.ensureChainId(e),s=await a.populateTransactionRequest(this._address,r,this._jsonRpcProvider),t=await this.handleIFrameRpc({method:"eth_signTransaction",params:[s]});return await this.handleJsonRpc({method:"eth_sendRawTransaction",params:[t]})}async handleEstimateGas(e){if(!e.params||!Array.isArray(e.params))throw new Error("Invalid params for eth_estimateGas");delete e.params[0].gasPrice,delete e.params[0].maxFeePerGas,delete e.params[0].maxPriorityFeePerGas;const r={...e.params[0],chainId:`0x${this._chainId.toString(16)}`};this.internalSwitchEthereumChain(r.chainId);try{return await this._jsonRpcProvider.send("eth_estimateGas",[r])}catch(e){console.warn(`Gas estimation failed with error: ${e}. Retrying gas estimation by omitting the 'from' address`);try{return delete r.from,await this._jsonRpcProvider.send("eth_estimateGas",[r])}catch(r){throw console.warn(`Gas estimation failed with error: ${r} when omitting the 'from' address`),e}}}handleSwitchEthereumChain(e){if(!e.params||!Array.isArray(e.params))throw new s.EmbeddedProviderError(`Invalid params for ${e.method}`,4200);let r;if("string"==typeof e.params[0])r=e.params[0];else{if(!("chainId"in e.params[0])||"string"!=typeof e.params[0].chainId)throw new s.EmbeddedProviderError(`Invalid params for ${e.method}`,4200);r=e.params[0].chainId}this.internalSwitchEthereumChain(r)}async handleIFrameRpc(e){try{const r=await this._privyInternal.getAccessToken();if(!r)throw new Error("Missing privy token. User must be logged in");this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_started",{method:e.method,address:this._address});const s=await this._walletProxy.rpc({request:e,address:this._address,accessToken:r});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_completed",{method:e.method,address:this._address}),s.response.data}catch(s){console.error(s);const t=s instanceof Error?s.message:"Unable to make wallet request";throw this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_failed",{method:e.method,address:this._address,error:t}),new r.PrivyClientError({code:"embedded_wallet_request_error",error:t})}}async handleJsonRpc(e){return this._jsonRpcProvider.send(e.method,e.params??[])}toJSON(){return`PrivyEIP1193Provider { address: '${this._address}', chainId: ${this._chainId}, request: [Function] }`}};
