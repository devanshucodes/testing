import{PrivyClientError as e}from"../Error.mjs";class r{_proxy;_privyInternal;_entropyId;_entropyIdVerifier;_hdWalletIndex;_publicKey;constructor({proxy:e,privyInternal:r,publicKey:t,hdWalletIndex:n,entropyId:s,entropyIdVerifier:i}){this._proxy=e,this._privyInternal=r,this._publicKey=t,this._hdWalletIndex=n,this._entropyId=s,this._entropyIdVerifier=i}async request(r){if(!await this._privyInternal.getAccessToken())throw new e({error:"Missing access token",code:"attempted_rpc_call_before_logged_in"});return this.handleIFrameRpc(r)}async handleIFrameRpc(r){try{const e=await this._privyInternal.getAccessToken();if(!e)throw new Error("Missing privy token. User must be logged in");this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_started",{method:r.method,address:this._publicKey});const t=await this._proxy.rpcWallet({accessToken:e,request:r,chainType:"solana",hdWalletIndex:this._hdWalletIndex,entropyId:this._entropyId,entropyIdVerifier:this._entropyIdVerifier});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_completed",{method:r.method,address:this._publicKey}),t.response.data}catch(t){console.error(t);const n=t instanceof Error?t.message:"Unable to make wallet request";throw this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_rpc_failed",{method:r.method,address:this._publicKey,error:n}),new e({code:"embedded_wallet_request_error",error:n})}}toJSON(){return`PrivyEmbeddedSolanaProvider { address: '${this._publicKey}', request: [Function] }`}}export{r as EmbeddedSolanaWalletProvider};
