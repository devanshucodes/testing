import{PrivyClientError as e}from"./Error.mjs";import{DEFAULT_SUPPORTED_CHAINS as r}from"./chains/index.mjs";import{EmbeddedWalletProvider as t}from"./embedded/EmbeddedWalletProvider.mjs";import{EmbeddedSolanaWalletProvider as o}from"./embedded/EmbeddedSolanaWalletProvider.mjs";import{EmbeddedWalletProxy as s}from"./embedded/EmbeddedWalletProxy.mjs";import{EmbeddedBitcoinWalletProvider as i}from"./embedded/EmbeddedBitcoinWalletProvider.mjs";import{errorIndicatesRecoveryIsNeeded as d}from"./embedded/errors.mjs";import{throwIfInvalidRecoveryUpgradePath as a}from"./embedded/utils/index.mjs";import"./chains/arbitrum.mjs";import"./chains/arbitrumGoerli.mjs";import"./chains/arbitrumSepolia.mjs";import"./chains/avalanche.mjs";import"./chains/avalancheFuji.mjs";import"./chains/base.mjs";import"./chains/baseGoerli.mjs";import"./chains/baseSepolia.mjs";import"./chains/berachainArtio.mjs";import"./chains/celo.mjs";import"./chains/celoAlfajores.mjs";import"./chains/filecoin.mjs";import"./chains/filecoinCalibration.mjs";import"./chains/garnetHolesky.mjs";import"./chains/goerli.mjs";import"./chains/holesky.mjs";import"./chains/linea.mjs";import"./chains/lineaTestnet.mjs";import"./chains/mainnet.mjs";import"./chains/optimism.mjs";import"./chains/optimismGoerli.mjs";import"./chains/optimismSepolia.mjs";import"./chains/polygon.mjs";import"./chains/polygonMumbai.mjs";import"./chains/redstone.mjs";import"./chains/redstoneHolesky.mjs";import"./chains/sepolia.mjs";import"./chains/zora.mjs";import"./chains/zoraSepolia.mjs";import"./chains/zoraTestnet.mjs";import"eventemitter3";import"./embedded/methods.mjs";import"./embedded/EventCallbackQueue.mjs";import"./embedded/withMfa.mjs";import"./embedded/types.mjs";import"@ethersproject/abstract-signer";import"@ethersproject/providers";import"./embedded/gas/arbitrum.mjs";import"@ethersproject/bignumber";import"./embedded/utils/ethers.mjs";import"./embedded/gas/bsc.mjs";import"./embedded/gas/op-stack.mjs";import"@ethersproject/contracts";import"@ethersproject/transactions";import"./embedded/gas/polygon.mjs";import"@ethersproject/units";import"fetch-retry";import"./chains/polygonAmoy.mjs";import"./embedded/utils/gas.mjs";class n{_privyInternal;_proxy;_chains=Array.from(r);_mfa;_mfaPromises;constructor(e,r,t,o,i){this._privyInternal=e,r&&(this._proxy=new s(r,i),o.setProxy(this._proxy)),t&&(this._chains=t),this._mfa=o,this._mfaPromises=i}setMessagePoster(e){this._proxy=new s(e,this._mfaPromises),this._mfa.setProxy(this._proxy)}async add(r){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");const t=await this._privyInternal.getAccessToken();if(!t)throw new e({error:"User must be logged in to create an embedded wallet",code:"embedded_wallet_creation_error"});await this._proxy.addWallet({accessToken:t,...r});const{user:o}=await this._privyInternal.refreshSession();return{user:o}}async getBitcoinProvider({wallet:e,entropyId:r,entropyIdVerifier:t,recoveryPassword:o,recoveryAccessToken:s,recoverySecretOverride:d}){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");if(!await this._privyInternal.getAccessToken())throw new Error("User must be logged in to create an embedded wallet");return await this._load({entropyId:r,entropyIdVerifier:t,wallet:e,recoveryPassword:o,recoveryAccessToken:s,recoverySecretOverride:d}),new i({account:e,privyInternal:this._privyInternal,proxy:this._proxy,entropyId:r,entropyIdVerifier:t})}async create(e,r,o,s,i,d){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");let a;if(a=r||(e?"user-passcode":"privy"),e&&"string"!=typeof e)throw new Error("Invalid recovery password, must be a string");if("privy"===a&&this._privyInternal.config?.embedded_wallet_config.require_user_password_on_create)throw new Error("Password not provided yet is required by App configuration");const n=await this._privyInternal.getAccessToken();if(!n)throw new Error("User must be logged in to create an embedded wallet");const{address:c}=await this._proxy.create({accessToken:n,recoveryMethod:a,recoveryPassword:e,recoveryAccessToken:o,recoverySecretOverride:s,iCloudRecordNameOverride:i,solanaAddress:d?.address});if(!c)throw new Error("Failed to create wallet");const{user:l}=await this._privyInternal.refreshSession();return{user:l,provider:new t({address:c,privyInternal:this._privyInternal,chains:this._chains,walletProxy:this._proxy})}}async createSolana(r){if(!this._proxy)throw new e({error:"Embedded wallet proxy not initialized",code:"embedded_wallet_creation_error"});const t=await this._privyInternal.getAccessToken();if(!t)throw new e({error:"User must be logged in to create an embedded wallet",code:"embedded_wallet_creation_error"});r?.ethereumAccount&&await this.getProvider(r.ethereumAccount);const{publicKey:s}=await this._proxy.createSolana({accessToken:t,ethereumAddress:r?.ethereumAccount?.address});if(!s)throw new e({error:"Failed to create wallet",code:"embedded_wallet_creation_error"});const{user:i}=await this._privyInternal.refreshSession();return{user:i,provider:new o({proxy:this._proxy,privyInternal:this._privyInternal,entropyId:r?.ethereumAccount?.address??s,entropyIdVerifier:r?.ethereumAccount?.address?"ethereum-address-verifier":"solana-address-verifier",publicKey:s,hdWalletIndex:0})}}async createAdditionalSolana({primaryPublicKey:r,hdWalletIndex:t}){if(!this._proxy)throw new e({error:"Embedded wallet proxy not initialized",code:"embedded_wallet_creation_error"});const s=await this._privyInternal.getAccessToken();if(!s)throw new e({error:"User must be logged in to create an embedded wallet",code:"embedded_wallet_creation_error"});const{publicKey:i}=await this._proxy.createAdditionalSolana({accessToken:s,primaryPublicKey:r,hdWalletIndex:t});if(!i)throw new e({error:"Failed to create wallet",code:"embedded_wallet_creation_error"});const{user:d}=await this._privyInternal.refreshSession();return{user:d,provider:new o({proxy:this._proxy,privyInternal:this._privyInternal,entropyId:r,entropyIdVerifier:"solana-address-verifier",publicKey:i,hdWalletIndex:t})}}async hasEmbeddedWallet(){const{user:e,token:r}=await this._privyInternal.refreshSession();if(!e||!r)throw new Error("User must be logged in to interact with embedded wallets");return!!this._getEmbeddedWallet(e)}async isPasswordRequired(){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");const{user:e,token:r}=await this._privyInternal.refreshSession();if(!e||!r)throw new Error("User must be logged in to interact with embedded wallets");const t=this._getEmbeddedWallet(e);if(!t)return!1;if("privy"===t.recovery_method)return!1;try{return await this._proxy.connect({accessToken:r,entropyId:t.address,entropyIdVerifier:"ethereum-address-verifier"}),!1}catch(e){return d(e)}}async getProvider(e,r,o,s){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");const i=await this._load({wallet:e,entropyId:e.address,entropyIdVerifier:"ethereum-address-verifier",recoveryPassword:r,recoveryAccessToken:o,recoverySecretOverride:s});return new t({address:i,privyInternal:this._privyInternal,chains:this._chains,walletProxy:this._proxy})}async getSolanaProvider(r,t,s,i,d,a){if(!this._proxy)throw new e({error:"Embedded wallet proxy not initialized",code:"embedded_wallet_webview_not_loaded"});return await this._load({wallet:r,entropyId:t,entropyIdVerifier:s,recoveryPassword:i,recoveryAccessToken:d,recoverySecretOverride:a}),new o({publicKey:r.address,privyInternal:this._privyInternal,proxy:this._proxy,entropyId:t,entropyIdVerifier:s,hdWalletIndex:r.wallet_index})}async setPassword(e,r){const{provider:t}=await this.setRecovery({wallet:e,recoveryMethod:"user-passcode",password:r});return t}async setRecovery(e){const{wallet:r,...o}=e;if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");a({currentRecoveryMethod:r.recovery_method,upgradeToRecoveryMethod:"icloud-native"===o.recoveryMethod?"icloud":o.recoveryMethod}),await this._load("solana"===r.chain_type?{wallet:r,entropyId:r.address,entropyIdVerifier:"solana-address-verifier"}:{wallet:r,entropyId:r.address,entropyIdVerifier:"ethereum-address-verifier"});const s=await this._privyInternal.getAccessToken();if(!s)throw new Error("User must be logged in to interact with embedded wallets");const i=r.recovery_method;this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_set_recovery_started",{address:r.address,target_recovery_method:o.recoveryMethod,existing_recovery_method:i});try{let e;if("user-passcode"===o.recoveryMethod)e={recoveryMethod:"user-passcode",recoveryPassword:o.password};else if("google-drive"===o.recoveryMethod)e={recoveryMethod:"google-drive",recoveryAccessToken:o.recoveryAccessToken};else if("icloud"===o.recoveryMethod)e={recoveryMethod:"icloud",recoveryAccessToken:o.recoveryAccessToken};else if("icloud-native"===o.recoveryMethod)e={recoveryMethod:"icloud-native",iCloudRecordNameOverride:o.iCloudRecordNameOverride,recoverySecretOverride:o.recoverySecretOverride};else{if("privy"!==o.recoveryMethod)throw new Error(`Unknown recovery method: ${o.recoveryMethod}`);e={recoveryMethod:"privy"}}await this._proxy.setRecovery({accessToken:s,entropyId:r.address,entropyIdVerifier:"solana"===r.chain_type?"solana-address-verifier":"ethereum-address-verifier",...e}),this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_set_recovery_completed",{address:r.address,target_recovery_method:o.recoveryMethod,existing_recovery_method:i});const{user:d}=await this._privyInternal.refreshSession();return{user:d,provider:"ethereum"!==r.chain_type?null:new t({address:r.address,privyInternal:this._privyInternal,chains:this._chains,walletProxy:this._proxy})}}catch(e){throw this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_set_recovery_failed",{address:r.address,recovery_method:r.recovery_method,error:e instanceof Error?e.message:"Unable to recover wallet"}),e}}getURL(){const e=new URL(`${this._privyInternal.baseUrl}/apps/${this._privyInternal.appId}/embedded-wallets`);return this._privyInternal.caid&&e.searchParams.append("caid",this._privyInternal.caid),this._privyInternal.appClientId&&e.searchParams.append("client_id",this._privyInternal.appClientId),e.href}get chains(){return this._chains}getMessageHandler(){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");return this._proxy.handleEmbeddedWalletMessages.bind(this._proxy)}onMessage(e){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");return this._proxy.handleEmbeddedWalletMessages(e)}async ping(e){try{if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");return await this._proxy.ping(e),!0}catch(e){return console.error(e),!1}}async _load({entropyId:e,entropyIdVerifier:r,wallet:t,recoveryPassword:o,recoveryAccessToken:s,recoverySecretOverride:i}){if(!this._proxy)throw new Error("Embedded wallet proxy not initialized");const a=await this._privyInternal.getAccessToken();if(!a)throw new Error("User must be logged in to interact with embedded wallets");try{return await this._proxy.connect({accessToken:a,entropyId:e,entropyIdVerifier:r}),e}catch(n){if(d(n)){try{if("privy"===t.recovery_method){this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_started",{address:t.address,recovery_method:t.recovery_method});const o=await this._proxy.recover({accessToken:a,entropyId:e,entropyIdVerifier:r});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_completed",{address:t.address,recovery_method:t.recovery_method}),o.entropyId}if("user-passcode"===t.recovery_method&&o){this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_started",{address:t.address,recovery_method:t.recovery_method});const s=await this._proxy.recover({accessToken:a,recoveryPassword:o,entropyId:e,entropyIdVerifier:r});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_completed",{address:t.address,recovery_method:t.recovery_method}),s.entropyId}if(["google-drive","icloud"].includes(t.recovery_method)&&s){this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_started",{address:t.address,recovery_method:t.recovery_method});const o=await this._proxy.recover({accessToken:a,recoveryAccessToken:s,entropyId:e,entropyIdVerifier:r});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_completed",{address:t.address,recovery_method:t.recovery_method}),o.entropyId}if("icloud"===t.recovery_method&&i){this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_started",{address:t.address,recovery_method:"icloud-native"});const o=await this._proxy.recover({accessToken:a,recoverySecretOverride:i,entropyId:e,entropyIdVerifier:r});return this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_completed",{address:t.address,recovery_method:"icloud-native"}),o.entropyId}}catch(r){throw this._privyInternal.createAnalyticsEvent("embedded_wallet_sdk_recovery_failed",{address:t.address,recovery_method:t.recovery_method,error:r instanceof Error?r.message:`Unable to recover wallet: ${e}`}),r}throw n}throw n}}_getEmbeddedWallet(e){return e?.linked_accounts.find((e=>"wallet"===e.type&&"embedded"===e.connector_type&&"privy"===e.wallet_client_type))}}export{n as default};
