"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@solana/web3.js"),a=require("./id.js");function t({name:e,rpcUrl:a}){if(a)return a;switch(e){case"mainnet-beta":return"https://api.mainnet-beta.solana.com";case"testnet":return"https://api.testnet.solana.com";case"devnet":return"https://api.devnet.solana.com"}}var n={id:a.SOLANA_FUNDING_PLUGIN_ID,getBalance:({address:a,cluster:n})=>new e.Connection(t(n)).getBalance(new e.PublicKey(a)),createTransferTransaction:async({from:a,to:n,amount:r,cluster:s})=>{let o=new e.PublicKey(a),i=new e.Transaction;i.add(e.SystemProgram.transfer({fromPubkey:o,toPubkey:new e.PublicKey(n),lamports:r}));let c=new e.Connection(t(s)),l=await c.getLatestBlockhash();return i.recentBlockhash=l.blockhash,i.feePayer=o,{transaction:i,connection:c}},createBridgeTransactionFromRelayQuote:async({quote:a,from:n,cluster:r})=>{let s=a.steps[0]?.items?.[0];if(!s)return;let o=s.data.instructions.map((({keys:a,programId:t,data:n})=>new e.TransactionInstruction({keys:a.map((({pubkey:a,isSigner:t,isWritable:n})=>({pubkey:new e.PublicKey(a),isSigner:t,isWritable:n}))),programId:new e.PublicKey(t),data:Buffer.from(n,"hex")}))),i=s.data.addressLookupTableAddresses?.map((a=>new e.PublicKey(a))),c=new e.Connection(t(r)),l=await Promise.all((i??[]).map((async e=>c.getAddressLookupTable(e).then((e=>e.value))))),{blockhash:u}=await c.getLatestBlockhash();return{transaction:new e.VersionedTransaction(new e.TransactionMessage({payerKey:new e.PublicKey(n),instructions:o,recentBlockhash:u}).compileToV0Message(l)),connection:c}}};exports.default=n;
