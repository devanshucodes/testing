"use strict";var e=require("permissionless"),t=require("permissionless/accounts"),a=require("permissionless/clients/pimlico"),n=require("viem"),r=require("viem/account-abstraction"),i=require("zod"),o=require("bs58"),s=require("ethers"),l=require("libphonenumber-js/max");function u(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var d=/*#__PURE__*/u(i),c=/*#__PURE__*/u(o);let p;var _=((p=_||{}).OAUTH_ACCOUNT_SUSPENDED="oauth_account_suspended",p.MISSING_OR_INVALID_PRIVY_APP_ID="missing_or_invalid_privy_app_id",p.MISSING_OR_INVALID_PRIVY_CLIENT_ID="missing_or_invalid_privy_client_id",p.MISSING_OR_INVALID_PRIVY_ACCOUNT_ID="missing_or_invalid_privy_account_id",p.MISSING_OR_INVALID_TOKEN="missing_or_invalid_token",p.MISSING_OR_INVALID_MFA="missing_or_invalid_mfa",p.EXPIRED_OR_INVALID_MFA_TOKEN="expired_or_invalid_mfa_token",p.INVALID_DATA="invalid_data",p.INVALID_CREDENTIALS="invalid_credentials",p.INVALID_CAPTCHA="invalid_captcha",p.LINKED_TO_ANOTHER_USER="linked_to_another_user",p.ALLOWLIST_REJECTED="allowlist_rejected",p.CANNOT_UNLINK_EMBEDDED_WALLET="cannot_unlink_embedded_wallet",p.CANNOT_UNLINK_SOLE_ACCOUNT="cannot_unlink_sole_account",p.CANNOT_LINK_MORE_OF_TYPE="cannot_link_more_of_type",p.LINKED_ACCOUNT_NOT_FOUND="linked_account_not_found",p.TOO_MANY_REQUESTS="too_many_requests",p.INVALID_ORIGIN="invalid_origin",p.MISSING_ORIGIN="missing_origin",p.INVALID_NATIVE_APP_ID="invalid_native_app_id",p.TOKEN_ALREADY_USED="token_already_used",p.ALREADY_LOGGED_OUT="already_logged_out",p.NOT_SUPPORTED="not_supported",p.USER_UNSUBSCRIBED="user_unsubscribed",p.MAX_APPS_REACHED="max_apps_reached",p.USER_LIMIT_REACHED="max_accounts_reached",p.DEVICE_REVOKED="device_revoked",p.WALLET_PASSWORD_EXISTS="wallet_password_exists",p.OAUTH_STATE_MISMATCH="oauth_state_mismatch",p.MAX_DENYLIST_ENTRIES_REACHED="max_denylist_entries_reached",p.DISALLOWED_LOGIN_METHOD="disallowed_login_method",p.DISALLOWED_PLUS_EMAIL="disallowed_plus_email",p.DISALLOWED_RECOVERY_METHOD="disallowed_recovery_method",p.LEGACY_DASHBOARD_LOGIN_CONFIGURATION="legacy_dashboard_login_configuration",p.CANNOT_SET_PASSWORD="cannot_set_password",p.INVALID_PKCE_PARAMETERS="invalid_pkce_parameters",p.INVALID_APP_URL_SCHEME_CONFIGURATION="invalid_app_url_scheme_configuration",p.CROSS_APP_CONNECTION_NOT_ALLOWED="cross_app_connection_not_allowed",p.USER_DOES_NOT_EXIST="user_does_not_exist",p.ACCOUNT_TRANSFER_REQUIRED="account_transfer_required",p.USER_HAS_NOT_DELEGATED_WALLET="user_has_not_delegated_wallet",p.FEATURE_NOT_ENABLED="feature_not_enabled",p.INSUFFICIENT_FUNDS="insufficient_funds",p.TRANSACTION_BROADCAST_FAILURE="transaction_broadcast_failure",p),z=class extends Error{toString(){return`${this.constructor.name}: ${this.message}${this.cause?` [cause: ${this.cause}]`:""}`}constructor(e,t,a,n){super(t),this.code=a,this.status=e,this.responseData=n}},m=class extends z{constructor(e,t){super(400,e,t||"invalid_data")}},g=class extends z{constructor(e,t){super(401,e,t)}},b=class extends z{constructor(e,t){super(422,e,t)}};function h(e,t){return Object.keys(t).forEach((function(a){"default"===a||"__esModule"===a||Object.prototype.hasOwnProperty.call(e,a)||Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[a]}})})),e}function f(e,t,a,n){Object.defineProperty(e,t,{get:a,set:n,enumerable:!0,configurable:!0})}i.z.object({error:i.z.string(),cause:i.z.string().optional(),code:i.z.nativeEnum(_).optional()});var y={},v={};f(v,"AnalyticsEvent",(()=>I));let I={path:"/api/v1/analytics_events",method:"POST"};var S={};f(S,"AppConfig",(()=>T));let T={path:"/api/v1/apps/:app_id",method:"GET"};var A={};f(A,"CoinbaseOnRampInit",(()=>k)),f(A,"CoinbaseOnRampStatus",(()=>E));let k={path:"/api/v1/funding/coinbase_on_ramp/init",method:"POST"},E={path:"/api/v1/funding/coinbase_on_ramp/status",method:"GET"};var O={};f(O,"GetCrossAppConnections",(()=>j));let j={path:"/api/v1/apps/:app_id/cross-app/connections",method:"GET"};var P={};f(P,"CustomJWTAuthenticate",(()=>w));let w={path:"/api/v1/custom_jwt_account/authenticate",method:"POST"};var C={};f(C,"FarcasterInit",(()=>R)),f(C,"FarcasterAuthenticate",(()=>D)),f(C,"FarcasterLink",(()=>N)),f(C,"FarcasterUnlink",(()=>U)),f(C,"FarcasterStatus",(()=>L)),f(C,"FarcasterV2Init",(()=>M)),f(C,"FarcasterV2Authenticate",(()=>x));let R={path:"/api/v1/farcaster/init",method:"POST"},D={path:"/api/v1/farcaster/authenticate",method:"POST"},N={path:"/api/v1/farcaster/link",method:"POST"},U={path:"/api/v1/farcaster/unlink",method:"POST"},L={path:"/api/v1/farcaster/status",method:"GET"},M={path:"/api/v2/farcaster/init",method:"POST"},x={path:"/api/v2/farcaster/authenticate",method:"POST"};var W={};f(W,"FarcasterSignerInit",(()=>F)),f(W,"FarcasterSignerStatus",(()=>V));let F={path:"/api/v1/farcaster/signer/init",method:"POST"},V={path:"/api/v1/farcaster/signer/status",method:"POST"};var G={};f(G,"GuestAuthenticate",(()=>H));let H={path:"/api/v1/guest/authenticate",method:"POST"};var B={};f(B,"MfaPasskeyInit",(()=>q)),f(B,"MfaPasskeyVerify",(()=>Y)),f(B,"MfaPasskeyEnrollment",(()=>K));let q={path:"/api/v1/mfa/passkeys/init",method:"POST"},Y={path:"/api/v1/mfa/passkeys/verify",method:"POST"},K={path:"/api/v1/mfa/passkeys/enrollment",method:"POST"};var $={};f($,"MfaPasswordlessSmsEnroll",(()=>X)),f($,"MfaPasswordlessSmsVerify",(()=>J)),f($,"MfaPasswordlessSmsInit",(()=>Q)),f($,"MfaPasswordlessSmsUnenroll",(()=>Z));let X={path:"/api/v1/mfa/passwordless_sms/enroll",method:"POST"},J={path:"/api/v1/mfa/passwordless_sms/verify",method:"POST"},Q={path:"/api/v1/mfa/passwordless_sms/init",method:"POST"},Z={path:"/api/v1/mfa/passwordless_sms/unenroll",method:"POST"};var ee={};f(ee,"MfaTotpEnroll",(()=>te)),f(ee,"MfaTotpVerify",(()=>ae)),f(ee,"MfaTotpInit",(()=>ne)),f(ee,"MfaTotpUnenroll",(()=>re));let te={path:"/api/v1/mfa/totp/enroll",method:"POST"},ae={path:"/api/v1/mfa/totp/verify",method:"POST"},ne={path:"/api/v1/mfa/totp/init",method:"POST"},re={path:"/api/v1/mfa/totp/unenroll",method:"POST"};var ie={};f(ie,"OAuthAuthenticate",(()=>oe)),f(ie,"OAuthInit",(()=>se)),f(ie,"OAuthLink",(()=>le)),f(ie,"OAuthUnlink",(()=>ue));let oe={path:"/api/v1/oauth/authenticate",method:"POST"},se={path:"/api/v1/oauth/init",method:"POST"},le={path:"/api/v1/oauth/link",method:"POST"},ue={path:"/api/v1/oauth/unlink",method:"POST"};var de={};f(de,"OAuthProviderAuthorize",(()=>ce)),f(de,"OAuthProviderVerify",(()=>pe));let ce={path:"/oauth/authorization_code",method:"POST"},pe={path:"/oauth/verify",method:"POST"};var _e={};f(_e,"PasskeyLink",(()=>ze)),f(_e,"PasskeyAuthenticate",(()=>me)),f(_e,"PasskeyRegister",(()=>ge)),f(_e,"PasskeyAuthenticateInit",(()=>be)),f(_e,"PasskeyRegisterInit",(()=>he)),f(_e,"PasskeyLinkInit",(()=>fe)),f(_e,"PasskeyUnlink",(()=>ye));let ze={path:"/api/v1/passkeys/link",method:"POST"},me={path:"/api/v1/passkeys/authenticate",method:"POST"},ge={path:"/api/v1/passkeys/register",method:"POST"},be={path:"/api/v1/passkeys/authenticate/init",method:"POST"},he={path:"/api/v1/passkeys/register/init",method:"POST"},fe={path:"/api/v1/passkeys/link/init",method:"POST"},ye={path:"/api/v1/passkeys/unlink",method:"POST"};var ve={};f(ve,"PasswordlessAuthenticate",(()=>Ie)),f(ve,"PasswordlessInit",(()=>Se)),f(ve,"PasswordlessLink",(()=>Te)),f(ve,"PasswordlessUnlink",(()=>Ae)),f(ve,"PasswordlessUpdate",(()=>ke));let Ie={path:"/api/v1/passwordless/authenticate",method:"POST"},Se={path:"/api/v1/passwordless/init",method:"POST"},Te={path:"/api/v1/passwordless/link",method:"POST"},Ae={path:"/api/v1/passwordless/unlink",method:"POST"},ke={path:"/api/v1/passwordless/update",method:"POST"};var Ee={};f(Ee,"PasswordlessSmsAuthenticate",(()=>Oe)),f(Ee,"PasswordlessSmsInit",(()=>je)),f(Ee,"PasswordlessSmsLink",(()=>Pe)),f(Ee,"PasswordlessSmsUnlink",(()=>we)),f(Ee,"PasswordlessSmsUpdate",(()=>Ce));let Oe={path:"/api/v1/passwordless_sms/authenticate",method:"POST"},je={path:"/api/v1/passwordless_sms/init",method:"POST"},Pe={path:"/api/v1/passwordless_sms/link",method:"POST"},we={path:"/api/v1/passwordless_sms/unlink",method:"POST"},Ce={path:"/api/v1/passwordless_sms/update",method:"POST"};var Re={};f(Re,"RecoveryKeyMaterial",(()=>De)),f(Re,"RecoveryOAuthInit",(()=>Ne)),f(Re,"RecoveryOAuthAuthenticate",(()=>Ue)),f(Re,"RecoveryOAuthInitICloud",(()=>Le)),f(Re,"RecoveryOAuthCallbackICloudExpo",(()=>Me)),f(Re,"RecoveryConfigurationICloud",(()=>xe));let De={path:"/api/v1/embedded_wallets/:address/recovery/key_material",method:"POST"},Ne={path:"/api/v1/recovery/oauth/init",method:"POST"},Ue={path:"/api/v1/recovery/oauth/authenticate",method:"POST"},Le={path:"/api/v1/recovery/oauth/init_icloud",method:"POST"},Me={path:"/api/v1/recovery/oauth/callback_icloud/:app_id/expo_ios",method:"GET"},xe={path:"/api/v1/recovery/configuration_icloud",method:"POST"};var We={};f(We,"getPathWithParams",(()=>Fe));let Fe=(e,t)=>t?Object.entries(t).reduce(((e,[t,a])=>e.replace(`:${t}`,`${a}`)),e):e;var Ve={};f(Ve,"RefreshSession",(()=>Ge)),f(Ve,"Logout",(()=>He));let Ge={path:"/api/v1/sessions",method:"POST"},He={path:"/api/v1/sessions/logout",method:"POST"};var Be={};f(Be,"GetSmartWalletConfig",(()=>qe)),f(Be,"PostSmartWalletConfig",(()=>Ye));let qe={path:"/api/v1/apps/:app_id/smart_wallets",method:"GET"},Ye={path:"/api/v1/apps/:app_id/smart_wallets",method:"POST"};var Ke={};f(Ke,"SiweInit",(()=>$e)),f(Ke,"SiweAuthenticate",(()=>Xe)),f(Ke,"SiweLink",(()=>Je)),f(Ke,"SiweLinkSmartWallet",(()=>Qe)),f(Ke,"SiweUnlink",(()=>Ze));let $e={path:"/api/v1/siwe/init",method:"POST"},Xe={path:"/api/v1/siwe/authenticate",method:"POST"},Je={path:"/api/v1/siwe/link",method:"POST"},Qe={path:"/api/v1/siwe/link_smart_wallet",method:"POST"},Ze={path:"/api/v1/siwe/unlink",method:"POST"};var et={};f(et,"SiwsInit",(()=>tt)),f(et,"SiwsAuthenticate",(()=>at)),f(et,"SiwsLink",(()=>nt)),f(et,"SiwsUnlink",(()=>rt));let tt={path:"/api/v1/siws/init",method:"POST"},at={path:"/api/v1/siws/authenticate",method:"POST"},nt={path:"/api/v1/siws/link",method:"POST"},rt={path:"/api/v1/siws/unlink",method:"POST"};var it={};f(it,"AcceptTermsOnUser",(()=>ot));let ot={path:"/api/v1/users/me/accept_terms",method:"POST"};var st={};f(st,"TelegramAuthenticate",(()=>lt)),f(st,"TelegramLink",(()=>ut)),f(st,"TelegramUnlink",(()=>dt));let lt={path:"/api/v1/telegram/authenticate",method:"POST"},ut={path:"/api/v1/telegram/link",method:"POST"},dt={path:"/api/v1/telegram/unlink",method:"POST"};var ct={};f(ct,"MoonpayOnRampSign",(()=>pt));let pt={path:"/api/v1/plugins/moonpay_on_ramp/sign",method:"POST"};h(y,v),h(y,S),h(y,A),h(y,O),h(y,P),h(y,C),h(y,W),h(y,G),h(y,B),h(y,$),h(y,ee),h(y,ie),h(y,de),h(y,_e),h(y,ve),h(y,Ee),h(y,Re),h(y,We),h(y,Ve),h(y,Be),h(y,Ke),h(y,et),h(y,it),h(y,st),h(y,ct);var _t={},zt={};f(zt,"AnalyticsEventInput",(()=>mt));let mt=i.z.object({event_name:i.z.string().max(255),client_id:i.z.string().max(255).nullable(),payload:i.z.record(i.z.any()).optional()});var gt={};f(gt,"AccountIdFromPath",(()=>Ot)),f(gt,"AppIdFromPath",(()=>jt)),f(gt,"Pagination",(()=>Pt));var bt={};f(bt,"UserId",(()=>ht)),f(bt,"Email",(()=>ft)),f(bt,"PasswordlessCode",(()=>yt)),f(bt,"WalletAddress",(()=>vt)),f(bt,"normalizeEthereumAddress",(()=>kt)),f(bt,"SolanaWalletAddress",(()=>It)),f(bt,"PhoneNumber",(()=>St)),f(bt,"normalizePhoneNumber",(()=>Tt)),f(bt,"isValidAddress",(()=>At)),f(bt,"AuthenticateMode",(()=>Et));let ht=i.z.string({required_error:"Privy DID must be included",invalid_type_error:"Privy DID is not a valid string"}).min(1).transform((e=>e.replace("did:privy:",""))),ft=i.z.string({required_error:"Email address must be provided",invalid_type_error:"Email address must be a valid string"}).email("Invalid email address").transform((e=>e.toLowerCase())),yt=i.z.string({required_error:"Verification code must be provided",invalid_type_error:"Invalid verification code"}).length(6,"Verification code must have 6 digits."),vt=i.z.string({required_error:"Ethereum address must be provided",invalid_type_error:"Invalid Ethereum address"}).transform(((e,t)=>kt(e)||(t.addIssue({code:i.z.ZodIssueCode.custom,message:"Invalid Ethereum address"}),i.z.NEVER))),It=i.z.string({required_error:"Solana address must be provided",invalid_type_error:"Invalid Solana address"}).trim().transform(((e,t)=>{try{c.default.decode(e)}catch(e){return t.addIssue({code:i.z.ZodIssueCode.custom,message:"Invalid Solana address"}),i.z.NEVER}return e})),St=i.z.string({required_error:"Phone number must be included",invalid_type_error:"Phone number is not a valid string"}).refine((e=>{try{return void 0!==Tt(e)}catch(e){return!1}}),{message:"Phone number is not valid"}).transform((e=>Tt(e)||""));function Tt(e){let t=l.parsePhoneNumber(e,"US");if(t?.isPossible())return t.formatInternational()}function At(e){return!!kt(e)}function kt(e){if("string"==typeof e)try{return s.ethers.utils.getAddress(e.trim())}catch(e){}}let Et=i.z.object({mode:i.z.enum(["no-signup","login-or-sign-up"]).optional()}),Ot=i.z.object({account_id:i.z.string({required_error:"Account ID must be provided",invalid_type_error:"Account ID is not a valid string"}).min(1)}),jt=i.z.object({app_id:i.z.string({required_error:"App ID must be provided",invalid_type_error:"App ID is not a valid string"}).min(1)}).transform((({app_id:e})=>({app_id:e,appId:e}))).catch((({error:e})=>{throw new m(e.message,_.MISSING_OR_INVALID_PRIVY_APP_ID)})),Pt=i.z.object({cursor:ht.optional(),limit:i.z.coerce.number().max(100,{message:"Query limit can be at maximum 100 records."}).optional()});var wt={};f(wt,"AppResponseSchema",(()=>Wt));var Ct={};f(Ct,"EmbeddedWalletConfigSchema",(()=>Nt)),f(Ct,"TelegramAuthConfigSchema",(()=>Ut)),f(Ct,"FundingMethodEnum",(()=>Lt)),f(Ct,"FundingMethodArraySchema",(()=>Mt)),f(Ct,"FundingConfigResponseSchema",(()=>xt));var Rt={};f(Rt,"Currency",(()=>Dt));let Dt=d.default.object({chain:d.default.string(),asset:d.default.enum(["native-currency","USDC"]).optional()}),Nt=d.default.object({create_on_login:d.default.enum(["users-without-wallets","all-users","off"]),user_owned_recovery_options:d.default.array(d.default.enum(["user-passcode","google-drive","icloud"])),require_user_owned_recovery_on_create:d.default.boolean().optional(),require_user_password_on_create:d.default.boolean().optional()}),Ut=d.default.object({bot_id:d.default.string(),bot_name:d.default.string(),link_enabled:d.default.boolean(),seamless_auth_enabled:d.default.boolean()}),Lt=d.default.enum(["moonpay","coinbase-onramp","external"]),Mt=d.default.array(Lt),xt=d.default.object({default_recommended_currency:Dt,default_recommended_amount:d.default.string(),methods:Mt,options:d.default.array(d.default.object({method:d.default.string(),provider:d.default.string()})),prompt_funding_on_wallet_creation:d.default.boolean(),cross_chain_bridging_enabled:d.default.boolean()}),Wt=i.z.object({id:i.z.string(),name:i.z.string(),logo_url:i.z.string().nullable(),icon_url:i.z.string().nullable(),terms_and_conditions_url:i.z.string().nullable(),privacy_policy_url:i.z.string().nullable(),require_users_accept_terms:i.z.boolean().nullable(),theme:i.z.string(),accent_color:i.z.string().nullable(),show_wallet_login_first:i.z.boolean(),allowed_domains:i.z.array(i.z.string()),allowed_native_app_ids:i.z.array(i.z.string()),allowed_native_app_url_schemes:i.z.array(i.z.string()),wallet_auth:i.z.boolean(),email_auth:i.z.boolean(),sms_auth:i.z.boolean(),google_oauth:i.z.boolean(),twitter_oauth:i.z.boolean(),discord_oauth:i.z.boolean(),github_oauth:i.z.boolean(),spotify_oauth:i.z.boolean(),instagram_oauth:i.z.boolean(),tiktok_oauth:i.z.boolean(),linkedin_oauth:i.z.boolean(),apple_oauth:i.z.boolean(),farcaster_auth:i.z.boolean(),passkey_auth:i.z.boolean(),passkeys_for_signup_enabled:i.z.boolean(),telegram_auth:i.z.boolean(),guest_auth:i.z.boolean(),solana_wallet_auth:i.z.boolean(),disable_plus_emails:i.z.boolean(),allowlist_enabled:i.z.boolean(),allowlist_config:i.z.object({error_title:i.z.string().nullable(),error_detail:i.z.string().nullable(),cta_text:i.z.string().nullable(),cta_link:i.z.string().nullable()}),wallet_connect_cloud_project_id:i.z.string().nullable(),custom_api_url:i.z.string().nullable(),embedded_wallet_config:Nt,enforce_wallet_uis:i.z.boolean(),legacy_wallet_ui_config:i.z.boolean(),fiat_on_ramp_enabled:i.z.boolean(),captcha_enabled:i.z.boolean(),twitter_oauth_on_mobile_enabled:i.z.boolean(),mfa_methods:i.z.array(i.z.enum(["sms","totp","passkey"])),captcha_site_key:i.z.string().optional(),verification_key:i.z.string(),telegram_auth_config:Ut.optional(),funding_config:xt.optional(),max_linked_wallets_per_user:i.z.number().nullable(),farcaster_link_wallets_enabled:i.z.boolean()});var Ft={};f(Ft,"CoinbaseOnRampInitInput",(()=>Yt)),f(Ft,"CoinbaseOnRampInitResponse",(()=>Kt)),f(Ft,"CoinbaseOnRampStatusResponse",(()=>$t));let Vt=i.z.enum(["ethereum","bitcoin","base","avacchain","optimism","solana","polygon","arbitrum","stellar"]),Gt=i.z.enum(["eth","ETH","USDC"]).transform((e=>e.toUpperCase())),Ht=i.z.enum(["SOL","USDC"]).transform((e=>e.toUpperCase())),Bt=i.z.object({addresses:i.z.array(i.z.object({address:vt,blockchains:i.z.array(Vt)})).max(1).min(1),assets:i.z.array(Gt).optional()}),qt=i.z.object({addresses:i.z.array(i.z.object({address:It,blockchains:i.z.array(Vt)})).max(1).min(1),assets:i.z.array(Ht).optional()}),Yt=i.z.union([Bt,qt]),Kt=i.z.object({app_id:i.z.string(),session_token:i.z.string(),channel_id:i.z.string(),partner_user_id:i.z.string()}),$t=i.z.object({status:i.z.enum(["pending","success","failure"])});var Xt={};f(Xt,"CrossAppConnectionsResponse",(()=>Jt));let Jt=i.z.object({connections:i.z.array(i.z.object({provider_app_id:i.z.string(),provider_app_name:i.z.string(),provider_app_icon_url:i.z.string().url().nullable(),provider_app_custom_api_url:i.z.string().url().nullable(),read_only:i.z.boolean()}))});var Qt={};f(Qt,"AuthenticateJwtInput",(()=>Zt));let Zt=d.default.object({token:d.default.string().optional()});var ea={};f(ea,"VerifyEmailInput",(()=>aa)),f(ea,"AuthenticateEmailInput",(()=>na)),f(ea,"InitEmailInput",(()=>ra)),f(ea,"UnlinkEmailInput",(()=>ia)),f(ea,"UpdateEmailInput",(()=>oa)),f(ea,"TransferEmailInput",(()=>sa));let ta=i.z.object({nonce:i.z.string()}),aa=i.z.object({code:yt,email:ft}),na=aa.merge(Et),ra=i.z.object({email:ft,token:i.z.string().optional()}),ia=i.z.object({address:ft}),oa=i.z.object({oldAddress:ft,newAddress:ft,code:yt}),sa=ta.extend({email:ft});var la={};f(la,"JsonWebKey",(()=>ua)),f(la,"JsonWebKeySet",(()=>da));let ua=i.z.object({kty:i.z.string(),use:i.z.enum(["sig","enc"]).optional(),key_ops:i.z.array(i.z.enum(["sign","verify","encrypt","decrypt","wrapKey","unwrapKey","deriveKey","deriveBits"])).optional(),alg:i.z.enum(["RS256"]),kid:i.z.string().optional(),x5u:i.z.string().optional(),x5c:i.z.array(i.z.string()).optional(),x5t:i.z.string().optional(),"x5t#S256":i.z.string().optional(),n:i.z.string().optional(),e:i.z.string().optional(),d:i.z.string().optional()}),da=i.z.object({keys:i.z.array(ua)});var ca={};f(ca,"FarcasterConnectInitResponse",(()=>pa)),f(ca,"FarcasterConnectStatusCompletedResponse",(()=>_a)),f(ca,"FarcasterConnectStatusPendingResponse",(()=>za)),f(ca,"FarcasterAuthenticateInput",(()=>ma)),f(ca,"FarcasterLinkInput",(()=>ga)),f(ca,"FarcasterInitInput",(()=>ba)),f(ca,"FarcasterUnlinkInput",(()=>ha)),f(ca,"TransferFarcasterInput",(()=>fa)),f(ca,"FarcasterV2InitInput",(()=>ya)),f(ca,"FarcasterV2InitResponse",(()=>va)),f(ca,"FarcasterV2AuthenticateInput",(()=>Ia));let pa=i.z.object({channel_token:i.z.string(),connect_uri:i.z.string()}),_a=i.z.object({state:i.z.literal("completed"),nonce:i.z.string(),message:i.z.string(),signature:i.z.string(),fid:i.z.number(),username:i.z.string(),display_name:i.z.string(),bio:i.z.string(),pfp_url:i.z.string()}),za=i.z.object({state:i.z.literal("pending"),nonce:i.z.string()}),ma=i.z.object({channel_token:i.z.string(),message:i.z.string(),signature:i.z.string(),fid:i.z.number()}).merge(Et),ga=i.z.object({channel_token:i.z.string(),message:i.z.string(),signature:i.z.string(),fid:i.z.number()}),ba=i.z.object({token:i.z.string().optional(),redirect_url:i.z.string().url().optional(),relying_party:i.z.string().optional()}),ha=i.z.object({fid:i.z.number()}),fa=ta.extend({farcaster_id:i.z.string(),farcaster_embedded_address:i.z.string()}),ya=i.z.object({}),va=i.z.object({nonce:i.z.string(),expires_at:i.z.string()}),Ia=i.z.object({fid:i.z.number(),message:i.z.string(),signature:i.z.string()}).merge(Et);var Sa={};f(Sa,"FarcasterSignerInitInput",(()=>Ta)),f(Sa,"FarcasterSignerInitResponse",(()=>Aa)),f(Sa,"FarcasterSignerStatusResponse",(()=>ka));let Ta=i.z.object({ed25519_public_key:i.z.string().refine((e=>e.startsWith("0x")&&66===e.length)),deadline:i.z.bigint().optional().default((()=>BigInt(Math.floor(Date.now()/1e3)+3600)))}),Aa=i.z.discriminatedUnion("status",[i.z.object({public_key:i.z.string(),status:i.z.literal("pending_approval"),signer_approval_url:i.z.string()}),i.z.object({public_key:i.z.string(),status:i.z.literal("approved"),fid:i.z.bigint()}),i.z.object({public_key:i.z.string(),status:i.z.literal("revoked"),fid:i.z.bigint()})]),ka=i.z.discriminatedUnion("status",[i.z.object({public_key:i.z.string(),status:i.z.literal("pending_approval")}),i.z.object({public_key:i.z.string(),status:i.z.literal("approved"),fid:i.z.bigint()}),i.z.object({public_key:i.z.string(),status:i.z.literal("revoked"),fid:i.z.bigint()})]);var Ea={};f(Ea,"AuthenticateGuestInput",(()=>Oa));let Oa=i.z.object({guest_credential:i.z.string().length(43)}).strict();var ja={};f(ja,"EmailIdTokenEntry",(()=>Dn)),f(ja,"PhoneIdTokenEntry",(()=>Nn)),f(ja,"WalletIdTokenEntry",(()=>Un)),f(ja,"FarcasterIdTokenEntry",(()=>Ln)),f(ja,"PasskeyIdTokenEntry",(()=>Mn)),f(ja,"TelegramIdTokenEntry",(()=>xn)),f(ja,"GoogleOauthIdTokenEntry",(()=>Wn)),f(ja,"TwitterOauthIdTokenEntry",(()=>Fn)),f(ja,"DiscordOauthIdTokenEntry",(()=>Vn)),f(ja,"GithubOauthIdTokenEntry",(()=>Gn)),f(ja,"LinkedInOauthIdTokenEntry",(()=>Hn)),f(ja,"SpotifyOauthIdTokenEntry",(()=>Bn)),f(ja,"InstagramOauthIdTokenEntry",(()=>qn)),f(ja,"TiktokOauthIdTokenEntry",(()=>Yn)),f(ja,"AppleOauthIdTokenEntry",(()=>Kn)),f(ja,"CustomJwtIdTokenEntry",(()=>$n)),f(ja,"CrossAppIdTokenEntry",(()=>Xn)),f(ja,"SmartWalletIdTokenEntry",(()=>Jn));var Pa={};f(Pa,"EmailAccount",(()=>qa)),f(Pa,"PhoneAccount",(()=>Ya)),f(Pa,"BaseWalletAccount",(()=>Ka)),f(Pa,"EthereumAccount",(()=>$a)),f(Pa,"SmartWalletAccount",(()=>Xa)),f(Pa,"SolanaAccount",(()=>Ja)),f(Pa,"FarcasterAccount",(()=>Qa)),f(Pa,"PasskeyAccount",(()=>Za)),f(Pa,"TelegramAccount",(()=>en)),f(Pa,"EthereumEmbeddedWalletAccount",(()=>nn)),f(Pa,"SolanaEmbeddedWalletAccount",(()=>rn)),f(Pa,"BitcoinSegwitEmbeddedWalletAccount",(()=>on)),f(Pa,"BitcoinTaprootEmbeddedWalletAccount",(()=>sn)),f(Pa,"GoogleOauthAccount",(()=>ln)),f(Pa,"TwitterOauthAccount",(()=>un)),f(Pa,"DiscordOauthAccount",(()=>dn)),f(Pa,"GithubOauthAccount",(()=>cn)),f(Pa,"LinkedInOauthAccount",(()=>pn)),f(Pa,"SpotifyOauthAccount",(()=>_n)),f(Pa,"InstagramOauthAccount",(()=>zn)),f(Pa,"TiktokOauthAccount",(()=>mn)),f(Pa,"AppleOauthAccount",(()=>gn)),f(Pa,"CustomJwtAccount",(()=>bn)),f(Pa,"CrossAppEmbeddedWallet",(()=>hn)),f(Pa,"CrossAppSmartWallet",(()=>fn)),f(Pa,"CrossAppAccount",(()=>yn)),f(Pa,"LinkedAccount",(()=>vn)),f(Pa,"SmsMfaMethod",(()=>In)),f(Pa,"TotpMfaMethod",(()=>Sn)),f(Pa,"PasskeyMfaMethod",(()=>Tn)),f(Pa,"LinkedMfaMethod",(()=>An)),f(Pa,"CustomMetadata",(()=>kn)),f(Pa,"OAuthTokens",(()=>En)),f(Pa,"User",(()=>On)),f(Pa,"SessionUpdateActionEnum",(()=>jn)),f(Pa,"AuthenticatedUser",(()=>Pn)),f(Pa,"LoggedOutUser",(()=>wn)),f(Pa,"MaybeUser",(()=>Cn));var wa={};f(wa,"SmartWalletProvider",(()=>Ma)),f(wa,"AlchemyPaymasterContextSchema",(()=>Wa)),f(wa,"SmartWalletNetworkConfigurationInputSchema",(()=>Va)),f(wa,"SmartWalletConfigurationSchema",(()=>Ga)),f(wa,"SmartWalletConfigurationInputSchema",(()=>Ha)),f(wa,"SmartWalletConfigurationResponseSchema",(()=>Ba)),f(wa,"SAFE",(()=>Ca)),f(wa,"KERNEL",(()=>Ra)),f(wa,"LIGHT_ACCOUNT",(()=>Na)),f(wa,"BICONOMY",(()=>Da)),f(wa,"COINBASE_SMART_WALLET",(()=>Ua)),f(wa,"SUPPORTED_SMART_WALLET_TYPES",(()=>La));let Ca="safe",Ra="kernel",Da="biconomy",Na="light_account",Ua="coinbase_smart_wallet",La=[Ca,Ra,Da,Na,Ua],Ma=i.z.enum(La,{invalid_type_error:"Please specify a supported provider.",required_error:"Please specify a supported provider."}),xa=i.z.string().regex(/^eip155:\d+$/,"Chain ID must be an eip155 chain ID"),Wa=i.z.object({policy_id:i.z.string().uuid()}),Fa=i.z.object({chain_id:xa,bundler_url:i.z.string(),paymaster_url:i.z.string().optional(),rpc_url:i.z.string().optional(),chain_name:i.z.string().optional(),paymaster_context:Wa.optional()}),Va=i.z.object({chain_id:xa,bundler_url:i.z.string().optional(),paymaster_url:i.z.string().optional(),rpc_url:i.z.string().optional(),chain_name:i.z.string().optional(),paymaster_context:Wa.optional()}),Ga=i.z.discriminatedUnion("enabled",[i.z.object({enabled:i.z.literal(!1)}),i.z.object({enabled:i.z.literal(!0),smart_wallet_type:Ma,configured_networks:i.z.array(Fa).min(1)})]),Ha=i.z.discriminatedUnion("enabled",[i.z.object({enabled:i.z.literal(!1)}),i.z.object({enabled:i.z.literal(!0),smart_wallet_type:Ma,configured_networks:i.z.array(Va).min(1)})]),Ba=Ga,qa=i.z.object({type:i.z.literal("email"),address:i.z.string(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),Ya=i.z.object({type:i.z.literal("phone"),phoneNumber:i.z.string(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),Ka=i.z.object({type:i.z.enum(["wallet","smart_wallet"]),address:i.z.string(),chain_type:i.z.enum(["solana","ethereum"])}),$a=i.z.object({type:i.z.literal("wallet"),address:i.z.string(),chain_id:i.z.string().optional(),chain_type:i.z.literal("ethereum"),wallet_client:i.z.literal("unknown"),wallet_client_type:i.z.string().optional(),connector_type:i.z.string().optional(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),Xa=i.z.object({type:i.z.literal("smart_wallet"),address:i.z.string(),smart_wallet_type:Ma,verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),Ja=i.z.object({type:i.z.literal("wallet"),address:i.z.string(),chain_type:i.z.literal("solana"),wallet_client:i.z.literal("unknown"),wallet_client_type:i.z.string().optional(),connector_type:i.z.string().optional(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),Qa=i.z.object({type:i.z.literal("farcaster"),fid:i.z.number(),owner_address:vt,username:i.z.string().optional(),display_name:i.z.string().optional(),bio:i.z.string().optional(),profile_picture:i.z.string().optional(),profile_picture_url:i.z.string().optional(),homepage_url:i.z.string().optional(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable(),signer_public_key:i.z.string().optional()}),Za=i.z.object({type:i.z.literal("passkey"),created_with_browser:i.z.string().optional(),created_with_os:i.z.string().optional(),created_with_device:i.z.string().optional(),credential_id:i.z.string(),authenticator_name:i.z.string().optional(),enrolled_in_mfa:i.z.boolean(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),en=i.z.object({type:i.z.literal("telegram"),telegram_user_id:i.z.string(),first_name:i.z.string().nullish(),last_name:i.z.string().nullish(),username:i.z.string().nullish(),photo_url:i.z.string().nullish(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}).transform((e=>({...e,telegramUserId:e.telegram_user_id,firstName:e.first_name}))),tn=i.z.enum(["privy","user-passcode","google-drive","icloud"]),an=i.z.object({type:i.z.literal("wallet"),address:i.z.string(),imported:i.z.boolean().default(!1),delegated:i.z.boolean().default(!1),wallet_index:i.z.number(),chain_id:i.z.string(),chain_type:i.z.string(),wallet_client:i.z.literal("privy"),wallet_client_type:i.z.literal("privy"),connector_type:i.z.literal("embedded"),recovery_method:tn,verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),nn=an.merge(i.z.object({chain_type:i.z.literal("ethereum")})),rn=an.merge(i.z.object({chain_type:i.z.literal("solana"),public_key:i.z.string()})),on=an.merge(i.z.object({chain_type:i.z.literal("bitcoin-segwit"),public_key:i.z.string()})),sn=an.merge(i.z.object({chain_type:i.z.literal("bitcoin-taproot"),public_key:i.z.string()})),ln=i.z.object({type:i.z.literal("google_oauth"),subject:i.z.string(),email:i.z.string(),name:i.z.string().nullable(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),un=i.z.object({type:i.z.literal("twitter_oauth"),subject:i.z.string(),username:i.z.string().nullable(),name:i.z.string().nullable(),profile_picture_url:i.z.string().nullable(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),dn=i.z.object({type:i.z.literal("discord_oauth"),subject:i.z.string(),username:i.z.string().nullable(),email:i.z.string().nullable(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),cn=i.z.object({type:i.z.literal("github_oauth"),subject:i.z.string(),username:i.z.string().nullable(),name:i.z.string().nullable(),email:i.z.string().nullable(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),pn=i.z.object({type:i.z.literal("linkedin_oauth"),subject:i.z.string(),name:i.z.string().optional(),email:i.z.string().nullable(),vanity_name:i.z.string().optional(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),_n=i.z.object({type:i.z.literal("spotify_oauth"),subject:i.z.string(),email:i.z.string().nullable(),name:i.z.string().nullable(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),zn=i.z.object({type:i.z.literal("instagram_oauth"),subject:i.z.string(),username:i.z.string().nullable(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),mn=i.z.object({type:i.z.literal("tiktok_oauth"),subject:i.z.string(),username:i.z.string().nullable(),name:i.z.string().nullable(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),gn=i.z.object({type:i.z.literal("apple_oauth"),subject:i.z.string(),email:i.z.string().nullable(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),bn=i.z.object({type:i.z.literal("custom_auth"),custom_user_id:i.z.string(),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),hn=i.z.object({address:i.z.string()}),fn=i.z.object({address:i.z.string()}),yn=i.z.object({type:i.z.literal("cross_app"),subject:i.z.string(),provider_app_id:i.z.string(),embedded_wallets:i.z.array(hn),smart_wallets:i.z.array(fn),verified_at:i.z.number(),first_verified_at:i.z.number().nullable(),latest_verified_at:i.z.number().nullable()}),vn=i.z.union([qa,Ya,$a,Ja,Xa,nn,rn,on,sn,ln,un,dn,cn,_n,zn,mn,pn,gn,bn,Qa,Za,en,yn]),In=i.z.object({type:i.z.literal("sms"),verified_at:i.z.number()}),Sn=i.z.object({type:i.z.literal("totp"),verified_at:i.z.number()}),Tn=i.z.object({type:i.z.literal("passkey"),verified_at:i.z.number()}),An=i.z.union([In,Sn,Tn]),kn=i.z.record(i.z.string(),i.z.union([i.z.string(),i.z.number(),i.z.boolean()])),En=i.z.object({provider:i.z.string(),access_token:i.z.string(),access_token_expires_in_seconds:i.z.number().optional(),refresh_token:i.z.string().optional(),refresh_token_expires_in_seconds:i.z.number().optional(),scopes:i.z.array(i.z.string()).optional()}),On=i.z.object({id:i.z.string(),linked_accounts:i.z.array(vn),mfa_methods:i.z.array(An),created_at:i.z.number(),has_accepted_terms:i.z.boolean(),is_guest:i.z.boolean(),custom_metadata:kn.optional()}),jn=i.z.enum(["set","ignore","clear"]),Pn=i.z.object({user:On,token:i.z.string().min(1).nullable(),privy_access_token:i.z.string().min(1).nullable(),refresh_token:i.z.string().min(1).nullable(),identity_token:i.z.string().min(1).optional(),is_new_user:i.z.boolean().optional(),oauth_tokens:En.optional(),oauth_provider_tokens:i.z.object({provider:i.z.string(),access_token:i.z.string(),access_token_expires_in_seconds:i.z.number().optional(),refresh_token:i.z.string().optional(),scopes:i.z.array(i.z.string()).optional()}).optional(),session_update_action:jn}),wn=i.z.object({user:i.z.null(),token:i.z.null(),refresh_token:i.z.null(),session_update_action:i.z.literal(jn.Values.clear)}),Cn=i.z.union([Pn,wn]),Rn={lv:i.z.number().nullable()},Dn=qa.pick({type:!0,address:!0}).extend(Rn),Nn=Ya.pick({type:!0,phoneNumber:!0}).extend(Rn).transform((({phoneNumber:e,...t})=>({phone_number:e,...t}))),Un=$a.pick({type:!0,address:!0,chain_type:!0,wallet_client_type:!0}).extend(Rn),Ln=Qa.pick({type:!0,fid:!0,username:!0,owner_address:!0}).extend(Rn).transform((({owner_address:e,...t})=>({oa:e,...t}))),Mn=Za.pick({type:!0,credential_id:!0}).extend(Rn),xn=i.z.object({type:i.z.literal("telegram"),telegram_user_id:i.z.string(),username:i.z.string().nullish(),lv:i.z.number().nullable()}),Wn=ln.pick({type:!0,subject:!0,email:!0}).extend(Rn),Fn=un.pick({type:!0,subject:!0,username:!0}).extend(Rn),Vn=dn.pick({type:!0,subject:!0,username:!0}).extend(Rn),Gn=cn.pick({type:!0,subject:!0,username:!0}).extend(Rn),Hn=pn.pick({type:!0,subject:!0,email:!0}).extend(Rn),Bn=_n.pick({type:!0,subject:!0,email:!0}).extend(Rn),qn=zn.pick({type:!0,subject:!0,username:!0}).extend(Rn),Yn=mn.pick({type:!0,subject:!0,username:!0}).extend(Rn),Kn=gn.pick({type:!0,subject:!0,email:!0}).extend(Rn),$n=bn.pick({type:!0,custom_user_id:!0}).extend(Rn),Xn=yn.pick({type:!0,subject:!0,provider_app_id:!0,embedded_wallets:!0,smart_wallets:!0}).extend(Rn),Jn=Xa.pick({type:!0,smart_wallet_type:!0,address:!0}).extend(Rn);var Qn={};f(Qn,"MfaVerifyResponse",(()=>Zn)),f(Qn,"MfaSmsInitInput",(()=>ar)),f(Qn,"MfaSmsAuthenticateEnrollInput",(()=>nr)),f(Qn,"MfaSmsEnrollInput",(()=>rr)),f(Qn,"MfaSmsVerifyInput",(()=>ir)),f(Qn,"MfaTotpInput",(()=>or)),f(Qn,"ResponseTotpInitMfa",(()=>sr));let Zn=d.default.object({token:d.default.string()}).strict(),er=d.default.object({action:d.default.literal("verify")}).strict(),tr=d.default.object({action:d.default.literal("enroll"),phoneNumber:St}).strict(),ar=d.default.union([er,tr]),nr=d.default.object({action:d.default.literal("enroll").optional(),code:yt,phoneNumber:St}).strict(),rr=d.default.object({code:yt,phoneNumber:St}).strict(),ir=d.default.object({code:yt}).strict(),or=d.default.object({code:yt}).strict(),sr=d.default.object({totpSecret:d.default.string(),totpAuthUrl:d.default.string()}).strict();var lr={};f(lr,"MfaPasskeyInitInput",(()=>Ir)),f(lr,"ResponsePasskeyInitMfa",(()=>Sr)),f(lr,"MfaPasskeyVerifyInput",(()=>Tr)),f(lr,"MfaEnrollmentPasskeyInput",(()=>Ar));var ur={};f(ur,"PasskeyAuthenticatorVerifyOptions",(()=>dr)),f(ur,"PasskeyAuthenticatorEnrollmentOptions",(()=>cr)),f(ur,"PasskeyAuthenticatorVerifyResponse",(()=>pr)),f(ur,"PasskeyAuthenticatorEnrollmentResponse",(()=>_r)),f(ur,"PasskeyInitInput",(()=>zr)),f(ur,"ResponsePasskeyInitAuthenticate",(()=>mr)),f(ur,"ResponsePasskeyInitLink",(()=>gr)),f(ur,"ResponsePasskeyInitRegister",(()=>br)),f(ur,"PasskeyLinkInput",(()=>hr)),f(ur,"PasskeyRegisterInput",(()=>fr)),f(ur,"PasskeyAuthenticateInput",(()=>yr)),f(ur,"UnlinkPasskeyInput",(()=>vr));let dr=d.default.object({challenge:d.default.string(),timeout:d.default.number().optional(),rp_id:d.default.string().optional(),allow_credentials:d.default.array(d.default.object({id:d.default.string(),type:d.default.string(),transports:d.default.array(d.default.string()).optional()})).optional(),user_verification:d.default.string().optional(),extensions:d.default.object({app_id:d.default.string().optional(),cred_props:d.default.boolean().optional(),hmac_create_secret:d.default.boolean().optional()}).optional()}),cr=d.default.object({rp:d.default.object({name:d.default.string(),id:d.default.string().optional()}),user:d.default.object({id:d.default.string(),name:d.default.string(),display_name:d.default.string()}),challenge:d.default.string(),pub_key_cred_params:d.default.array(d.default.object({alg:d.default.number(),type:d.default.literal("public-key")})),timeout:d.default.number().optional(),exclude_credentials:d.default.array(d.default.object({id:d.default.string(),type:d.default.string(),transports:d.default.array(d.default.string()).optional()})).optional(),authenticator_selection:d.default.object({authenticator_attachment:d.default.string().optional(),require_resident_key:d.default.boolean().optional(),resident_key:d.default.string().optional(),user_verification:d.default.string().optional()}).optional(),attestation:d.default.string().optional(),extensions:d.default.object({app_id:d.default.string().optional(),cred_props:d.default.object({rk:d.default.boolean().optional()}).optional(),hmac_create_secret:d.default.boolean().optional()}).optional()}),pr=d.default.object({id:d.default.string(),raw_id:d.default.string(),response:d.default.object({client_data_json:d.default.string(),authenticator_data:d.default.string(),signature:d.default.string(),user_handle:d.default.string().optional()}),authenticator_attachment:d.default.string().optional(),client_extension_results:d.default.object({app_id:d.default.boolean().optional(),cred_props:d.default.object({rk:d.default.boolean().optional()}).optional(),hmac_create_secret:d.default.boolean().optional()}),type:d.default.literal("public-key")}),_r=d.default.object({id:d.default.string(),raw_id:d.default.string(),response:d.default.object({client_data_json:d.default.string(),attestation_object:d.default.string(),authenticator_data:d.default.string().optional(),transports:d.default.array(d.default.any()).optional(),public_key_algorithm:d.default.number().optional(),public_key:d.default.string().optional()}),authenticator_attachment:d.default.string().optional(),client_extension_results:d.default.object({app_id:d.default.boolean().optional(),cred_props:d.default.object({rk:d.default.boolean().optional()}).optional(),hmac_create_secret:d.default.boolean().optional()}),type:d.default.literal("public-key")}),zr=d.default.object({relying_party:d.default.string().url().optional(),token:d.default.string().optional()}).strict(),mr=d.default.object({relying_party:d.default.string().url().optional(),options:dr}).strict(),gr=d.default.object({relying_party:d.default.string().url().optional(),options:cr}).strict(),br=d.default.object({relying_party:d.default.string().url().optional(),options:cr}).strict(),hr=d.default.object({relying_party:d.default.string().url().optional(),authenticator_response:_r}).strict(),fr=d.default.object({relying_party:d.default.string().url().optional(),authenticator_response:_r}).strict(),yr=d.default.object({relying_party:d.default.string().url().optional(),challenge:d.default.string(),authenticator_response:pr}).strict(),vr=d.default.object({credential_id:d.default.string()}),Ir=d.default.object({relying_party:d.default.string().url().optional()}).strict(),Sr=d.default.object({options:dr}).strict(),Tr=d.default.object({authenticator_response:pr,relying_party:d.default.string().url().optional()}).strict(),Ar=d.default.object({credential_ids:d.default.array(d.default.string())});var kr={};f(kr,"ExternalOAuthProvider",(()=>Or)),f(kr,"OAuthProvider",(()=>jr)),f(kr,"AuthenticateOauthInput",(()=>Pr)),f(kr,"OAuthInitInput",(()=>wr)),f(kr,"LinkOAuthInput",(()=>Cr)),f(kr,"OAuthUnlinkInput",(()=>Rr)),f(kr,"OAuthInitResponse",(()=>Dr)),f(kr,"OAuthLinkResponse",(()=>Nr)),f(kr,"TransferOAuthInput",(()=>Ur)),f(kr,"SUPPORTED_OAUTH_PROVIDERS",(()=>Er));let Er=["google","discord","twitter","github","spotify","instagram","tiktok","linkedin","apple"],Or=i.z.enum(Er,{invalid_type_error:"Please specify a supported provider.",required_error:"Please specify a supported provider."}),jr=Or.or(i.z.custom((e=>"string"==typeof e&&/^privy:[a-z0-9]{25}$/i.test(e)),{message:"Please specify a supported provider."})),Pr=i.z.object({authorization_code:i.z.string(),state_code:i.z.string(),code_verifier:i.z.string().min(43).max(128).optional(),code_type:i.z.enum(["raw"]).optional()}).merge(Et).catch((()=>{throw new g("Please specify authorization_code and state_code.",_.INVALID_CREDENTIALS)})),wr=i.z.object({redirect_to:i.z.string({required_error:"Please provide a redirect_to value."}),provider:jr,token:i.z.string().optional(),state_code:i.z.string().optional(),code_challenge:i.z.string().optional()}),Cr=i.z.object({authorization_code:i.z.string(),state_code:i.z.string(),code_verifier:i.z.string().min(43).max(128).optional(),code_type:i.z.enum(["raw"]).optional()}),Rr=i.z.object({subject:i.z.string(),provider:jr}),Dr=i.z.object({url:i.z.string()}),Nr=On.extend({oauth_tokens:En.optional()}),Ur=ta.extend({userInfo:i.z.object({subject:i.z.string(),name:i.z.string().optional(),username:i.z.string().optional(),profilePictureUrl:i.z.string().optional(),email:i.z.string().optional().nullable(),vanityName:i.z.string().optional()})});var Lr={};f(Lr,"AuthorizationCodeInput",(()=>Mr));let Mr=i.z.object({redirect_to:i.z.string(),state:i.z.string(),code_challenge:i.z.string()});var xr={};f(xr,"EmptyObject",(()=>Wr)),f(xr,"SuccessObject",(()=>Fr));let Wr=i.z.record(i.z.string(),i.z.never()),Fr=i.z.object({success:i.z.boolean()});var Vr={};f(Vr,"RecoveryKeyMaterialInput",(()=>Gr)),f(Vr,"RecoveryKeyMaterialResponse",(()=>Hr)),f(Vr,"OAuthAuthenticateRecoveryResponse",(()=>Br)),f(Vr,"OAuthInitRecoveryInput",(()=>qr)),f(Vr,"OAuthInitICloudRecoveryInput",(()=>Yr)),f(Vr,"OAuthCallbackICloudExpoInput",(()=>Kr)),f(Vr,"OAuthCallbackICloudExpoResponse",(()=>$r)),f(Vr,"RecoveryConfigurationICloudInput",(()=>Xr)),f(Vr,"RecoveryConfigurationICloudResponse",(()=>Jr));let Gr=i.z.object({chain_type:i.z.string().optional()}),Hr=i.z.object({recovery_type:i.z.enum(["user_passcode_derived_recovery_key","privy_passcode_derived_recovery_key","privy_generated_recovery_key","google_drive_recovery_secret","icloud_recovery_secret"]),recovery_key_derivation_salt:i.z.string(),recovery_code:i.z.string(),recovery_key:i.z.string(),file_id:i.z.string(),icloud_record_name:i.z.string()}),Br=i.z.object({access_token:i.z.string()}),qr=i.z.object({redirect_to:i.z.string({required_error:"Please provide a redirect_to value."}),token:i.z.string().optional(),state_code:i.z.string().optional(),code_challenge:i.z.string().optional()}),Yr=i.z.object({client_type:i.z.enum(["web","expo-ios"])}),Kr=i.z.object({ckWebAuthToken:i.z.string()}).transform((e=>({ckWebAuthToken:e.ckWebAuthToken}))).catch((()=>{throw new g("Missing ckWebAuthToken.",_.INVALID_DATA)})),$r=Wr,Xr=i.z.object({client_type:i.z.enum(["web","expo-ios"])}),Jr=i.z.object({api_token:i.z.string(),container_identifier:i.z.string(),environment:i.z.string()});var Qr={};f(Qr,"SiweInput",(()=>Zr)),f(Qr,"SmartWalletSiweInput",(()=>ei)),f(Qr,"AuthenticateSiweInput",(()=>ti)),f(Qr,"SiweAddressInput",(()=>ai)),f(Qr,"SiweInitInput",(()=>ni)),f(Qr,"SiweNonce",(()=>ri)),f(Qr,"TransferSiweInput",(()=>ii));let Zr=i.z.object({message:i.z.string({invalid_type_error:"Invalid SIWE message"}),signature:i.z.string({invalid_type_error:"Invalid SIWE signature"}),chainId:i.z.string().max(41).nullable().default(null),walletClientType:i.z.string().max(64).nullable().default(null),connectorType:i.z.string().max(64).nullable().default(null)}),ei=i.z.object({message:i.z.string({invalid_type_error:"Invalid SIWE message"}),signature:i.z.string({invalid_type_error:"Invalid SIWE signature"}),smart_wallet_type:Ma}),ti=Zr.merge(Et),ai=i.z.object({address:vt}),ni=i.z.object({address:vt,token:i.z.string().optional()}),ri=i.z.object({nonce:i.z.string(),address:i.z.string(),expires_at:i.z.string()}),ii=ta.extend({address:vt,chainId:i.z.string().max(41).nullable().default(null),walletClientType:i.z.string().max(64).nullable().default(null),connectorType:i.z.string().max(64).nullable().default(null)});var oi={};f(oi,"SiwsInput",(()=>si)),f(oi,"AuthenticateSiwsInput",(()=>li)),f(oi,"SiwsAddressInput",(()=>ui)),f(oi,"SiwsInitInput",(()=>di)),f(oi,"SiwsNonce",(()=>ci));let si=i.z.object({message:i.z.string({invalid_type_error:"Invalid SIWS message"}),signature:i.z.string({invalid_type_error:"Invalid SIWS signature"}),walletClientType:i.z.string().max(64).nullable().default(null),connectorType:i.z.string().max(64).nullable().default(null)}),li=si.merge(Et),ui=i.z.object({address:It}),di=i.z.object({address:It,token:i.z.string().optional()}),ci=i.z.object({nonce:i.z.string(),address:i.z.string(),expires_at:i.z.string()});var pi={};f(pi,"VerifyPhoneInput",(()=>_i)),f(pi,"AuthenticatePhoneInput",(()=>zi)),f(pi,"PasswordlessSmsPhoneInput",(()=>mi)),f(pi,"UnlinkPhoneInput",(()=>gi)),f(pi,"UpdatePhoneInput",(()=>bi)),f(pi,"TransferPhoneInput",(()=>hi));let _i=i.z.object({code:yt.catch((()=>{throw new b("Invalid SMS verification code",_.INVALID_CREDENTIALS)})),phoneNumber:St.catch((()=>{throw new b("Invalid phone number",_.INVALID_CREDENTIALS)}))}),zi=_i.merge(Et),mi=i.z.object({phoneNumber:St.catch((()=>{throw new b("Invalid phone number, not formatted correctly",_.INVALID_DATA)})),token:i.z.string().optional()}),gi=i.z.object({phoneNumber:St}),bi=i.z.object({old_phone_number:St,new_phone_number:St,code:yt}),hi=ta.extend({phoneNumber:St});var fi={};f(fi,"TelegramAuthenticateInput",(()=>vi)),f(fi,"TelegramLinkInput",(()=>Ii)),f(fi,"TelegramUnlinkInput",(()=>Si)),f(fi,"TransferTelegramInput",(()=>Ti));let yi=d.default.object({id:d.default.coerce.number(),first_name:d.default.string(),auth_date:d.default.coerce.number(),hash:d.default.string(),username:d.default.string().optional(),last_name:d.default.string().optional(),photo_url:d.default.string().optional()}),vi=d.default.object({captcha_token:d.default.string().optional(),telegram_auth_result:yi.optional(),telegram_web_app_data:d.default.object({query_id:d.default.string().optional(),auth_date:d.default.coerce.number(),hash:d.default.string(),user:d.default.string(),chat_instance:d.default.string().optional(),chat_type:d.default.string().optional(),start_param:d.default.string().optional(),signature:d.default.string().optional()}).optional()}).merge(Et),Ii=vi.omit({telegram_web_app_data:!0}).required({telegram_auth_result:!0}),Si=d.default.object({telegram_user_id:d.default.string()}),Ti=ta.extend({telegram_auth_result:yi});var Ai={};f(Ai,"RefreshTokenInput",(()=>ki)),f(Ai,"OptionalRefreshTokenInput",(()=>Ei)),f(Ai,"ForkedToken",(()=>Oi));let ki=i.z.object({refresh_token:i.z.string()}),Ei=ki.partial(),Oi=i.z.object({token:i.z.string(),refresh_token:i.z.string(),new_session_refresh_token:i.z.string()});var ji={};f(ji,"DelegatedActionsConsentInput",(()=>Pi));let Pi=i.z.object({encrypted_tee_share:i.z.string(),app_share:i.z.string(),delegated_addresses:i.z.array(i.z.object({chain_type:i.z.union([i.z.literal("solana"),i.z.literal("ethereum")]),address:i.z.string(),wallet_index:i.z.number().default(0)}))});var wi={};f(wi,"CAIP2",(()=>Ci)),f(wi,"AuthorizationKeyRole",(()=>Ni)),f(wi,"WalletApiSolanaSignTransactionRpcInput",(()=>Ui)),f(wi,"WalletApiSolanaSignAndSendTransactionRpcInput",(()=>Li)),f(wi,"WalletApiSolanaSignMessageRpcInput",(()=>Mi)),f(wi,"UnsignedEthereumTransaction",(()=>Fi)),f(wi,"WalletApiEthereumSignTransactionRpcInput",(()=>Vi)),f(wi,"WalletApiEthereumSendTransactionRpcInput",(()=>Gi)),f(wi,"WalletApiEthereumPersonalSignRpcInputParams",(()=>Hi)),f(wi,"WalletApiEthereumPersonalSignRpcInput",(()=>Bi)),f(wi,"WalletApiEthereumSignTypedDataRpcInput",(()=>qi)),f(wi,"WalletApiEthereumRpcInput",(()=>Yi)),f(wi,"WalletApiSolanaRpcInput",(()=>Ki)),f(wi,"WalletApiRpcInput",(()=>$i)),f(wi,"WalletApiSolanaSignTransactionRpcResponse",(()=>Xi)),f(wi,"WalletApiSolanaSignAndSendTransactionRpcResponse",(()=>Ji)),f(wi,"WalletApiSolanaSignMessageRpcResponse",(()=>Qi)),f(wi,"WalletApiEthereumSignTransactionRpcResponse",(()=>Zi)),f(wi,"WalletApiEthereumSendTransactionRpcResponse",(()=>eo)),f(wi,"WalletApiEthereumPersonalSignRpcResponse",(()=>to)),f(wi,"WalletApiEthereumSignTypedDataRpcResponse",(()=>ao)),f(wi,"WalletApiRpcResponse",(()=>no)),f(wi,"WalletApiRegisterAuthorizationKeyInput",(()=>ro)),f(wi,"WalletResponse",(()=>oo)),f(wi,"WalletApiCreateInput",(()=>so)),f(wi,"WalletApiCreateResponse",(()=>lo)),f(wi,"WalletIdFromPath",(()=>uo)),f(wi,"WalletApiRevokeAuthorizationKeyInput",(()=>co)),f(wi,"AuthorizationKey",(()=>po));let Ci=i.z.string().regex(/^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$/,"Chain ID must be a valid CAIP-2 chain ID, e.g. 'eip155:1'"),Ri=i.z.object({address:It.optional(),chain_type:i.z.literal("solana").optional()}),Di=i.z.object({address:vt.optional(),chain_type:i.z.literal("ethereum").optional()}),Ni=i.z.enum(["root","manager"]).nullable(),Ui=i.z.object({method:i.z.literal("signTransaction"),params:i.z.object({transaction:i.z.string(),encoding:i.z.literal("base64")})}).merge(Ri),Li=i.z.object({method:i.z.literal("signAndSendTransaction"),caip2:Ci,params:i.z.object({transaction:i.z.string(),encoding:i.z.literal("base64")})}).merge(Ri),Mi=i.z.object({method:i.z.literal("signMessage"),params:i.z.object({message:i.z.string(),encoding:i.z.literal("base64")})}).merge(Ri),xi=i.z.string().startsWith("0x"),Wi=i.z.union([xi,i.z.number()]),Fi=i.z.object({from:vt.optional(),to:vt.optional(),chain_id:Wi.optional(),nonce:Wi.optional(),data:xi.optional(),value:Wi.optional(),type:i.z.union([i.z.literal(0),i.z.literal(1),i.z.literal(2)]).optional(),gas_limit:Wi.optional(),gas_price:Wi.optional(),max_fee_per_gas:Wi.optional(),max_priority_fee_per_gas:Wi.optional()}),Vi=i.z.object({method:i.z.literal("eth_signTransaction"),params:i.z.object({transaction:Fi})}).merge(Di),Gi=i.z.object({method:i.z.literal("eth_sendTransaction"),caip2:Ci,params:i.z.object({transaction:Fi})}).merge(Di),Hi=i.z.object({message:i.z.string(),encoding:i.z.union([i.z.literal("utf-8"),i.z.literal("hex")])}),Bi=i.z.object({method:i.z.literal("personal_sign"),params:Hi}).merge(Di),qi=i.z.object({method:i.z.literal("eth_signTypedData_v4"),params:i.z.object({typed_data:i.z.object({domain:i.z.record(i.z.string(),i.z.any()),types:i.z.record(i.z.string(),i.z.any()),message:i.z.record(i.z.string(),i.z.any()),primary_type:i.z.string()})})}).merge(Di),Yi=i.z.discriminatedUnion("method",[Vi,Gi,Bi,qi]),Ki=i.z.discriminatedUnion("method",[Ui,Li,Mi]),$i=i.z.union([Yi,Ki]),Xi=i.z.object({method:i.z.literal("signTransaction"),data:i.z.object({signed_transaction:i.z.string(),encoding:i.z.literal("base64")})}),Ji=i.z.object({method:i.z.literal("signAndSendTransaction"),data:i.z.object({hash:i.z.string(),caip2:Ci}).optional(),error:i.z.object({code:i.z.string(),message:i.z.string()}).optional()}),Qi=i.z.object({method:i.z.literal("signMessage"),data:i.z.object({signature:i.z.string(),encoding:i.z.literal("base64")})}),Zi=i.z.object({method:i.z.literal("eth_signTransaction"),data:i.z.object({signed_transaction:i.z.string(),encoding:i.z.literal("rlp")})}),eo=i.z.object({method:i.z.literal("eth_sendTransaction"),data:i.z.object({hash:i.z.string(),caip2:Ci}).optional(),error:i.z.object({code:i.z.string(),message:i.z.string()}).optional()}),to=i.z.object({method:i.z.literal("personal_sign"),data:i.z.object({signature:i.z.string(),encoding:i.z.literal("hex")})}),ao=i.z.object({method:i.z.literal("eth_signTypedData_v4"),data:i.z.object({signature:i.z.string(),encoding:i.z.literal("hex")})}),no=i.z.discriminatedUnion("method",[Xi,Ji,Qi,Zi,eo,to,ao]),ro=i.z.object({display_name:i.z.string().optional(),public_key:i.z.string(),role:Ni.optional()}),io=i.z.union([i.z.literal("solana"),i.z.literal("ethereum")]),oo=i.z.object({id:i.z.string(),address:i.z.string(),chain_type:io}),so=i.z.object({chain_type:io,policy_id:i.z.string().optional()}),lo=i.z.object({id:i.z.string(),chain_type:io,address:i.z.string()}),uo=i.z.object({wallet_id:i.z.string({required_error:"Wallet ID must be provided",invalid_type_error:"Wallet ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new m(e.message,_.INVALID_DATA)})),co=i.z.object({id:i.z.string()}),po=i.z.object({id:i.z.string(),display_name:i.z.string().nullable(),public_key:i.z.string(),role:Ni,created_at:i.z.number()});var _o={};f(_o,"MoonpayOnRampSignInput",(()=>fo)),f(_o,"MoonpayOnRampSignResponse",(()=>yo));let zo=i.z.enum(["ach_bank_transfer","credit_debit_card","gbp_bank_transfer","gbp_open_banking_payment","mobile_wallet","sepa_bank_transfer","sepa_open_banking_payment","pix_instant_payment","yellow_card_bank_transfer"]),mo=i.z.enum(["AVAX_CCHAIN","CELO_CELO","CUSD_CELO","DAI_ETHEREUM","ETH_ETHEREUM","ETH_ARBITRUM","ETH_OPTIMISM","ETH_POLYGON","ETH_BASE","FIL_FVM","MATIC_ETHEREUM","MATIC_POLYGON","USDC_ETHEREUM","USDC_ARBITRUM","USDC_OPTIMISM","USDC_POLYGON","USDC_BASE","USDT_ETHEREUM","USDT_POLYGON","WETH_POLYGON","WBTC_ETHEREUM","BNB_BNB","BNB_BSC","CELO","CUSD","DAI","ETH","FIL","MATIC","USDC","USDT","WETH","WBTC"]),go=i.z.object({quoteCurrencyAmount:i.z.number().optional(),email:ft.optional(),paymentMethod:zo.optional(),uiConfig:i.z.object({accentColor:i.z.string().optional(),theme:i.z.enum(["light","dark"]).optional()}).optional()}),bo=i.z.object({address:vt,config:go.extend({currencyCode:mo.transform((e=>{switch(e){case"AVAX_CCHAIN":return"AVAX_CCHAIN";case"CELO_CELO":return"CELO";case"CUSD_CELO":return"CUSD";case"DAI_ETHEREUM":return"DAI";case"ETH_ETHEREUM":return"ETH";case"ETH_ARBITRUM":return"ETH_ARBITRUM";case"ETH_OPTIMISM":return"ETH_OPTIMISM";case"ETH_POLYGON":return"ETH_POLYGON";case"ETH_BASE":return"ETH_BASE";case"FIL_FVM":return"FIL";case"MATIC_ETHEREUM":return"MATIC";case"MATIC_POLYGON":return"MATIC_POLYGON";case"USDC_ETHEREUM":return"USDC";case"USDC_ARBITRUM":return"USDC_ARBITRUM";case"USDC_OPTIMISM":return"USDC_OPTIMISM";case"USDC_POLYGON":return"USDC_POLYGON";case"USDC_BASE":return"USDC_BASE";case"USDT_ETHEREUM":return"USDT";case"USDT_POLYGON":return"USDT_POLYGON";case"WETH_POLYGON":return"WETH";case"WBTC_ETHEREUM":return"WBTC";case"BNB_BNB":return"BNB";case"BNB_BSC":return"BNB_BSC";case"CELO":case"CUSD":case"DAI":case"ETH":case"FIL":case"MATIC":case"USDC":case"USDT":case"WETH":case"WBTC":return e;default:throw Error(`Invalid currency code: ${e}`)}})).optional()})}),ho=i.z.object({address:It,config:go.extend({currencyCode:i.z.enum(["SOL","USDC_SOL"]).optional()})}),fo=i.z.union([bo,ho]).and(i.z.object({useSandbox:i.z.boolean().optional().default(!1)})),yo=i.z.object({signedUrl:i.z.string(),externalTransactionId:i.z.string()});h(_t,zt),h(_t,gt),h(_t,wt),h(_t,Ct),h(_t,Ft),h(_t,bt),h(_t,Xt),h(_t,Rt),h(_t,Qt),h(_t,ea),h(_t,la),h(_t,ca),h(_t,Sa),h(_t,Ea),h(_t,ja),h(_t,Qn),h(_t,lr),h(_t,kr),h(_t,Lr),h(_t,xr),h(_t,ur),h(_t,Vr),h(_t,Qr),h(_t,oi),h(_t,pi),h(_t,wa),h(_t,fi),h(_t,Ai),h(_t,Pa),h(_t,ji),h(_t,wi),h(_t,_o);let vo={address:r.entryPoint06Address,version:"0.6"},Io={address:r.entryPoint07Address,version:"0.7"},So=({owner:e,smartWalletType:a,publicClient:n})=>{switch(a){case Ca:return t.toSafeSmartAccount({client:n,entryPoint:Io,owners:[e],version:"1.4.1"});case Ra:return t.toEcdsaKernelSmartAccount({client:n,version:"0.3.1",entryPoint:Io,owners:[e]});case Da:return t.toBiconomySmartAccount({client:n,owners:[e],entryPoint:vo});case Na:return t.toLightSmartAccount({client:n,entryPoint:vo,owner:e,version:"1.1.0"});case Ua:return async function({client:e,owner:t}){let[a]=await t.request({method:"eth_accounts"});if(!a)throw Error("Unable to request embedded owner for eth_accounts");return await r.toCoinbaseSmartAccount({client:e,owners:[{type:"local",source:"privy",address:a,sign:async({hash:e})=>await t.request({method:"secp256k1_sign",params:[e]})}]})}({client:n,owner:e});default:throw Error(`Invalid smart account type: ${a}.`)}},To=["rpc.zerodev.app","public.pimlico.io","api.pimlico.io"];exports.signerToSmartAccountClient=async({owner:t,smartWalletType:r,chain:i,publicClient:o,bundlerUrl:s,paymasterUrl:l,paymasterContext:u})=>{let d=await So({owner:t,smartWalletType:r,publicClient:o}),c=a.createPimlicoClient({transport:n.http(s),entryPoint:d.entryPoint}),p=l?a.createPimlicoClient({transport:n.http(l),entryPoint:d.entryPoint}):void 0;return e.createSmartAccountClient({account:d,chain:i,paymaster:p,paymasterContext:u,bundlerTransport:n.http(s),userOperation:{estimateFeesPerGas:async()=>{if(To.some((e=>s.includes(e))))return await c.getUserOperationGasPrice().then((e=>e.fast));{let e=await o.estimateFeesPerGas(),t=s.includes("api.developer.coinbase.com")?175n:150n;return{...e,maxFeePerGas:e.maxFeePerGas*t/100n,maxPriorityFeePerGas:e.maxPriorityFeePerGas*t/100n}}}}})};
