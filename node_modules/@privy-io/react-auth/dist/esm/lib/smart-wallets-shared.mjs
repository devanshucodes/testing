import{createSmartAccountClient as e}from"permissionless";import{toLightSmartAccount as t,toBiconomySmartAccount as a,toEcdsaKernelSmartAccount as n,toSafeSmartAccount as r}from"permissionless/accounts";import{createPimlicoClient as i}from"permissionless/clients/pimlico";import{http as o}from"viem";import{toCoinbaseSmartAccount as s,entryPoint06Address as l,entryPoint07Address as p}from"viem/account-abstraction";import c,{z as u}from"zod";import _ from"bs58";import{ethers as d}from"ethers";import{parsePhoneNumber as m}from"libphonenumber-js/max";let g;var b=((g=b||{}).OAUTH_ACCOUNT_SUSPENDED="oauth_account_suspended",g.MISSING_OR_INVALID_PRIVY_APP_ID="missing_or_invalid_privy_app_id",g.MISSING_OR_INVALID_PRIVY_CLIENT_ID="missing_or_invalid_privy_client_id",g.MISSING_OR_INVALID_PRIVY_ACCOUNT_ID="missing_or_invalid_privy_account_id",g.MISSING_OR_INVALID_TOKEN="missing_or_invalid_token",g.MISSING_OR_INVALID_MFA="missing_or_invalid_mfa",g.EXPIRED_OR_INVALID_MFA_TOKEN="expired_or_invalid_mfa_token",g.INVALID_DATA="invalid_data",g.INVALID_CREDENTIALS="invalid_credentials",g.INVALID_CAPTCHA="invalid_captcha",g.LINKED_TO_ANOTHER_USER="linked_to_another_user",g.ALLOWLIST_REJECTED="allowlist_rejected",g.CANNOT_UNLINK_EMBEDDED_WALLET="cannot_unlink_embedded_wallet",g.CANNOT_UNLINK_SOLE_ACCOUNT="cannot_unlink_sole_account",g.CANNOT_LINK_MORE_OF_TYPE="cannot_link_more_of_type",g.LINKED_ACCOUNT_NOT_FOUND="linked_account_not_found",g.TOO_MANY_REQUESTS="too_many_requests",g.INVALID_ORIGIN="invalid_origin",g.MISSING_ORIGIN="missing_origin",g.INVALID_NATIVE_APP_ID="invalid_native_app_id",g.TOKEN_ALREADY_USED="token_already_used",g.ALREADY_LOGGED_OUT="already_logged_out",g.NOT_SUPPORTED="not_supported",g.USER_UNSUBSCRIBED="user_unsubscribed",g.MAX_APPS_REACHED="max_apps_reached",g.USER_LIMIT_REACHED="max_accounts_reached",g.DEVICE_REVOKED="device_revoked",g.WALLET_PASSWORD_EXISTS="wallet_password_exists",g.OAUTH_STATE_MISMATCH="oauth_state_mismatch",g.MAX_DENYLIST_ENTRIES_REACHED="max_denylist_entries_reached",g.DISALLOWED_LOGIN_METHOD="disallowed_login_method",g.DISALLOWED_PLUS_EMAIL="disallowed_plus_email",g.DISALLOWED_RECOVERY_METHOD="disallowed_recovery_method",g.LEGACY_DASHBOARD_LOGIN_CONFIGURATION="legacy_dashboard_login_configuration",g.CANNOT_SET_PASSWORD="cannot_set_password",g.INVALID_PKCE_PARAMETERS="invalid_pkce_parameters",g.INVALID_APP_URL_SCHEME_CONFIGURATION="invalid_app_url_scheme_configuration",g.CROSS_APP_CONNECTION_NOT_ALLOWED="cross_app_connection_not_allowed",g.USER_DOES_NOT_EXIST="user_does_not_exist",g.ACCOUNT_TRANSFER_REQUIRED="account_transfer_required",g.USER_HAS_NOT_DELEGATED_WALLET="user_has_not_delegated_wallet",g.FEATURE_NOT_ENABLED="feature_not_enabled",g.INSUFFICIENT_FUNDS="insufficient_funds",g.TRANSACTION_BROADCAST_FAILURE="transaction_broadcast_failure",g),h=class extends Error{toString(){return`${this.constructor.name}: ${this.message}${this.cause?` [cause: ${this.cause}]`:""}`}constructor(e,t,a,n){super(t),this.code=a,this.status=e,this.responseData=n}},y=class extends h{constructor(e,t){super(400,e,t||"invalid_data")}},v=class extends h{constructor(e,t){super(401,e,t)}},I=class extends h{constructor(e,t){super(422,e,t)}};function f(e,t){return Object.keys(t).forEach((function(a){"default"===a||"__esModule"===a||Object.prototype.hasOwnProperty.call(e,a)||Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[a]}})})),e}function S(e,t,a,n){Object.defineProperty(e,t,{get:a,set:n,enumerable:!0,configurable:!0})}u.object({error:u.string(),cause:u.string().optional(),code:u.nativeEnum(b).optional()});var T={},A={};S(A,"AnalyticsEvent",(()=>k));let k={path:"/api/v1/analytics_events",method:"POST"};var E={};S(E,"AppConfig",(()=>O));let O={path:"/api/v1/apps/:app_id",method:"GET"};var j={};S(j,"CoinbaseOnRampInit",(()=>P)),S(j,"CoinbaseOnRampStatus",(()=>w));let P={path:"/api/v1/funding/coinbase_on_ramp/init",method:"POST"},w={path:"/api/v1/funding/coinbase_on_ramp/status",method:"GET"};var R={};S(R,"GetCrossAppConnections",(()=>C));let C={path:"/api/v1/apps/:app_id/cross-app/connections",method:"GET"};var D={};S(D,"CustomJWTAuthenticate",(()=>N));let N={path:"/api/v1/custom_jwt_account/authenticate",method:"POST"};var U={};S(U,"FarcasterInit",(()=>L)),S(U,"FarcasterAuthenticate",(()=>M)),S(U,"FarcasterLink",(()=>x)),S(U,"FarcasterUnlink",(()=>W)),S(U,"FarcasterStatus",(()=>F)),S(U,"FarcasterV2Init",(()=>V)),S(U,"FarcasterV2Authenticate",(()=>G));let L={path:"/api/v1/farcaster/init",method:"POST"},M={path:"/api/v1/farcaster/authenticate",method:"POST"},x={path:"/api/v1/farcaster/link",method:"POST"},W={path:"/api/v1/farcaster/unlink",method:"POST"},F={path:"/api/v1/farcaster/status",method:"GET"},V={path:"/api/v2/farcaster/init",method:"POST"},G={path:"/api/v2/farcaster/authenticate",method:"POST"};var H={};S(H,"FarcasterSignerInit",(()=>B)),S(H,"FarcasterSignerStatus",(()=>Y));let B={path:"/api/v1/farcaster/signer/init",method:"POST"},Y={path:"/api/v1/farcaster/signer/status",method:"POST"};var q={};S(q,"GuestAuthenticate",(()=>K));let K={path:"/api/v1/guest/authenticate",method:"POST"};var z={};S(z,"MfaPasskeyInit",(()=>$)),S(z,"MfaPasskeyVerify",(()=>X)),S(z,"MfaPasskeyEnrollment",(()=>J));let $={path:"/api/v1/mfa/passkeys/init",method:"POST"},X={path:"/api/v1/mfa/passkeys/verify",method:"POST"},J={path:"/api/v1/mfa/passkeys/enrollment",method:"POST"};var Q={};S(Q,"MfaPasswordlessSmsEnroll",(()=>Z)),S(Q,"MfaPasswordlessSmsVerify",(()=>ee)),S(Q,"MfaPasswordlessSmsInit",(()=>te)),S(Q,"MfaPasswordlessSmsUnenroll",(()=>ae));let Z={path:"/api/v1/mfa/passwordless_sms/enroll",method:"POST"},ee={path:"/api/v1/mfa/passwordless_sms/verify",method:"POST"},te={path:"/api/v1/mfa/passwordless_sms/init",method:"POST"},ae={path:"/api/v1/mfa/passwordless_sms/unenroll",method:"POST"};var ne={};S(ne,"MfaTotpEnroll",(()=>re)),S(ne,"MfaTotpVerify",(()=>ie)),S(ne,"MfaTotpInit",(()=>oe)),S(ne,"MfaTotpUnenroll",(()=>se));let re={path:"/api/v1/mfa/totp/enroll",method:"POST"},ie={path:"/api/v1/mfa/totp/verify",method:"POST"},oe={path:"/api/v1/mfa/totp/init",method:"POST"},se={path:"/api/v1/mfa/totp/unenroll",method:"POST"};var le={};S(le,"OAuthAuthenticate",(()=>pe)),S(le,"OAuthInit",(()=>ce)),S(le,"OAuthLink",(()=>ue)),S(le,"OAuthUnlink",(()=>_e));let pe={path:"/api/v1/oauth/authenticate",method:"POST"},ce={path:"/api/v1/oauth/init",method:"POST"},ue={path:"/api/v1/oauth/link",method:"POST"},_e={path:"/api/v1/oauth/unlink",method:"POST"};var de={};S(de,"OAuthProviderAuthorize",(()=>me)),S(de,"OAuthProviderVerify",(()=>ge));let me={path:"/oauth/authorization_code",method:"POST"},ge={path:"/oauth/verify",method:"POST"};var be={};S(be,"PasskeyLink",(()=>he)),S(be,"PasskeyAuthenticate",(()=>ye)),S(be,"PasskeyRegister",(()=>ve)),S(be,"PasskeyAuthenticateInit",(()=>Ie)),S(be,"PasskeyRegisterInit",(()=>fe)),S(be,"PasskeyLinkInit",(()=>Se)),S(be,"PasskeyUnlink",(()=>Te));let he={path:"/api/v1/passkeys/link",method:"POST"},ye={path:"/api/v1/passkeys/authenticate",method:"POST"},ve={path:"/api/v1/passkeys/register",method:"POST"},Ie={path:"/api/v1/passkeys/authenticate/init",method:"POST"},fe={path:"/api/v1/passkeys/register/init",method:"POST"},Se={path:"/api/v1/passkeys/link/init",method:"POST"},Te={path:"/api/v1/passkeys/unlink",method:"POST"};var Ae={};S(Ae,"PasswordlessAuthenticate",(()=>ke)),S(Ae,"PasswordlessInit",(()=>Ee)),S(Ae,"PasswordlessLink",(()=>Oe)),S(Ae,"PasswordlessUnlink",(()=>je)),S(Ae,"PasswordlessUpdate",(()=>Pe));let ke={path:"/api/v1/passwordless/authenticate",method:"POST"},Ee={path:"/api/v1/passwordless/init",method:"POST"},Oe={path:"/api/v1/passwordless/link",method:"POST"},je={path:"/api/v1/passwordless/unlink",method:"POST"},Pe={path:"/api/v1/passwordless/update",method:"POST"};var we={};S(we,"PasswordlessSmsAuthenticate",(()=>Re)),S(we,"PasswordlessSmsInit",(()=>Ce)),S(we,"PasswordlessSmsLink",(()=>De)),S(we,"PasswordlessSmsUnlink",(()=>Ne)),S(we,"PasswordlessSmsUpdate",(()=>Ue));let Re={path:"/api/v1/passwordless_sms/authenticate",method:"POST"},Ce={path:"/api/v1/passwordless_sms/init",method:"POST"},De={path:"/api/v1/passwordless_sms/link",method:"POST"},Ne={path:"/api/v1/passwordless_sms/unlink",method:"POST"},Ue={path:"/api/v1/passwordless_sms/update",method:"POST"};var Le={};S(Le,"RecoveryKeyMaterial",(()=>Me)),S(Le,"RecoveryOAuthInit",(()=>xe)),S(Le,"RecoveryOAuthAuthenticate",(()=>We)),S(Le,"RecoveryOAuthInitICloud",(()=>Fe)),S(Le,"RecoveryOAuthCallbackICloudExpo",(()=>Ve)),S(Le,"RecoveryConfigurationICloud",(()=>Ge));let Me={path:"/api/v1/embedded_wallets/:address/recovery/key_material",method:"POST"},xe={path:"/api/v1/recovery/oauth/init",method:"POST"},We={path:"/api/v1/recovery/oauth/authenticate",method:"POST"},Fe={path:"/api/v1/recovery/oauth/init_icloud",method:"POST"},Ve={path:"/api/v1/recovery/oauth/callback_icloud/:app_id/expo_ios",method:"GET"},Ge={path:"/api/v1/recovery/configuration_icloud",method:"POST"};var He={};S(He,"getPathWithParams",(()=>Be));let Be=(e,t)=>t?Object.entries(t).reduce(((e,[t,a])=>e.replace(`:${t}`,`${a}`)),e):e;var Ye={};S(Ye,"RefreshSession",(()=>qe)),S(Ye,"Logout",(()=>Ke));let qe={path:"/api/v1/sessions",method:"POST"},Ke={path:"/api/v1/sessions/logout",method:"POST"};var ze={};S(ze,"GetSmartWalletConfig",(()=>$e)),S(ze,"PostSmartWalletConfig",(()=>Xe));let $e={path:"/api/v1/apps/:app_id/smart_wallets",method:"GET"},Xe={path:"/api/v1/apps/:app_id/smart_wallets",method:"POST"};var Je={};S(Je,"SiweInit",(()=>Qe)),S(Je,"SiweAuthenticate",(()=>Ze)),S(Je,"SiweLink",(()=>et)),S(Je,"SiweLinkSmartWallet",(()=>tt)),S(Je,"SiweUnlink",(()=>at));let Qe={path:"/api/v1/siwe/init",method:"POST"},Ze={path:"/api/v1/siwe/authenticate",method:"POST"},et={path:"/api/v1/siwe/link",method:"POST"},tt={path:"/api/v1/siwe/link_smart_wallet",method:"POST"},at={path:"/api/v1/siwe/unlink",method:"POST"};var nt={};S(nt,"SiwsInit",(()=>rt)),S(nt,"SiwsAuthenticate",(()=>it)),S(nt,"SiwsLink",(()=>ot)),S(nt,"SiwsUnlink",(()=>st));let rt={path:"/api/v1/siws/init",method:"POST"},it={path:"/api/v1/siws/authenticate",method:"POST"},ot={path:"/api/v1/siws/link",method:"POST"},st={path:"/api/v1/siws/unlink",method:"POST"};var lt={};S(lt,"AcceptTermsOnUser",(()=>pt));let pt={path:"/api/v1/users/me/accept_terms",method:"POST"};var ct={};S(ct,"TelegramAuthenticate",(()=>ut)),S(ct,"TelegramLink",(()=>_t)),S(ct,"TelegramUnlink",(()=>dt));let ut={path:"/api/v1/telegram/authenticate",method:"POST"},_t={path:"/api/v1/telegram/link",method:"POST"},dt={path:"/api/v1/telegram/unlink",method:"POST"};var mt={};S(mt,"MoonpayOnRampSign",(()=>gt));let gt={path:"/api/v1/plugins/moonpay_on_ramp/sign",method:"POST"};f(T,A),f(T,E),f(T,j),f(T,R),f(T,D),f(T,U),f(T,H),f(T,q),f(T,z),f(T,Q),f(T,ne),f(T,le),f(T,de),f(T,be),f(T,Ae),f(T,we),f(T,Le),f(T,He),f(T,Ye),f(T,ze),f(T,Je),f(T,nt),f(T,lt),f(T,ct),f(T,mt);var bt={},ht={};S(ht,"AnalyticsEventInput",(()=>yt));let yt=u.object({event_name:u.string().max(255),client_id:u.string().max(255).nullable(),payload:u.record(u.any()).optional()});var vt={};S(vt,"AccountIdFromPath",(()=>Rt)),S(vt,"AppIdFromPath",(()=>Ct)),S(vt,"Pagination",(()=>Dt));var It={};S(It,"UserId",(()=>ft)),S(It,"Email",(()=>St)),S(It,"PasswordlessCode",(()=>Tt)),S(It,"WalletAddress",(()=>At)),S(It,"normalizeEthereumAddress",(()=>Pt)),S(It,"SolanaWalletAddress",(()=>kt)),S(It,"PhoneNumber",(()=>Et)),S(It,"normalizePhoneNumber",(()=>Ot)),S(It,"isValidAddress",(()=>jt)),S(It,"AuthenticateMode",(()=>wt));let ft=u.string({required_error:"Privy DID must be included",invalid_type_error:"Privy DID is not a valid string"}).min(1).transform((e=>e.replace("did:privy:",""))),St=u.string({required_error:"Email address must be provided",invalid_type_error:"Email address must be a valid string"}).email("Invalid email address").transform((e=>e.toLowerCase())),Tt=u.string({required_error:"Verification code must be provided",invalid_type_error:"Invalid verification code"}).length(6,"Verification code must have 6 digits."),At=u.string({required_error:"Ethereum address must be provided",invalid_type_error:"Invalid Ethereum address"}).transform(((e,t)=>Pt(e)||(t.addIssue({code:u.ZodIssueCode.custom,message:"Invalid Ethereum address"}),u.NEVER))),kt=u.string({required_error:"Solana address must be provided",invalid_type_error:"Invalid Solana address"}).trim().transform(((e,t)=>{try{_.decode(e)}catch(e){return t.addIssue({code:u.ZodIssueCode.custom,message:"Invalid Solana address"}),u.NEVER}return e})),Et=u.string({required_error:"Phone number must be included",invalid_type_error:"Phone number is not a valid string"}).refine((e=>{try{return void 0!==Ot(e)}catch(e){return!1}}),{message:"Phone number is not valid"}).transform((e=>Ot(e)||""));function Ot(e){let t=m(e,"US");if(t?.isPossible())return t.formatInternational()}function jt(e){return!!Pt(e)}function Pt(e){if("string"==typeof e)try{return d.utils.getAddress(e.trim())}catch(e){}}let wt=u.object({mode:u.enum(["no-signup","login-or-sign-up"]).optional()}),Rt=u.object({account_id:u.string({required_error:"Account ID must be provided",invalid_type_error:"Account ID is not a valid string"}).min(1)}),Ct=u.object({app_id:u.string({required_error:"App ID must be provided",invalid_type_error:"App ID is not a valid string"}).min(1)}).transform((({app_id:e})=>({app_id:e,appId:e}))).catch((({error:e})=>{throw new y(e.message,b.MISSING_OR_INVALID_PRIVY_APP_ID)})),Dt=u.object({cursor:ft.optional(),limit:u.coerce.number().max(100,{message:"Query limit can be at maximum 100 records."}).optional()});var Nt={};S(Nt,"AppResponseSchema",(()=>Ht));var Ut={};S(Ut,"EmbeddedWalletConfigSchema",(()=>xt)),S(Ut,"TelegramAuthConfigSchema",(()=>Wt)),S(Ut,"FundingMethodEnum",(()=>Ft)),S(Ut,"FundingMethodArraySchema",(()=>Vt)),S(Ut,"FundingConfigResponseSchema",(()=>Gt));var Lt={};S(Lt,"Currency",(()=>Mt));let Mt=c.object({chain:c.string(),asset:c.enum(["native-currency","USDC"]).optional()}),xt=c.object({create_on_login:c.enum(["users-without-wallets","all-users","off"]),user_owned_recovery_options:c.array(c.enum(["user-passcode","google-drive","icloud"])),require_user_owned_recovery_on_create:c.boolean().optional(),require_user_password_on_create:c.boolean().optional()}),Wt=c.object({bot_id:c.string(),bot_name:c.string(),link_enabled:c.boolean(),seamless_auth_enabled:c.boolean()}),Ft=c.enum(["moonpay","coinbase-onramp","external"]),Vt=c.array(Ft),Gt=c.object({default_recommended_currency:Mt,default_recommended_amount:c.string(),methods:Vt,options:c.array(c.object({method:c.string(),provider:c.string()})),prompt_funding_on_wallet_creation:c.boolean(),cross_chain_bridging_enabled:c.boolean()}),Ht=u.object({id:u.string(),name:u.string(),logo_url:u.string().nullable(),icon_url:u.string().nullable(),terms_and_conditions_url:u.string().nullable(),privacy_policy_url:u.string().nullable(),require_users_accept_terms:u.boolean().nullable(),theme:u.string(),accent_color:u.string().nullable(),show_wallet_login_first:u.boolean(),allowed_domains:u.array(u.string()),allowed_native_app_ids:u.array(u.string()),allowed_native_app_url_schemes:u.array(u.string()),wallet_auth:u.boolean(),email_auth:u.boolean(),sms_auth:u.boolean(),google_oauth:u.boolean(),twitter_oauth:u.boolean(),discord_oauth:u.boolean(),github_oauth:u.boolean(),spotify_oauth:u.boolean(),instagram_oauth:u.boolean(),tiktok_oauth:u.boolean(),linkedin_oauth:u.boolean(),apple_oauth:u.boolean(),farcaster_auth:u.boolean(),passkey_auth:u.boolean(),passkeys_for_signup_enabled:u.boolean(),telegram_auth:u.boolean(),guest_auth:u.boolean(),solana_wallet_auth:u.boolean(),disable_plus_emails:u.boolean(),allowlist_enabled:u.boolean(),allowlist_config:u.object({error_title:u.string().nullable(),error_detail:u.string().nullable(),cta_text:u.string().nullable(),cta_link:u.string().nullable()}),wallet_connect_cloud_project_id:u.string().nullable(),custom_api_url:u.string().nullable(),embedded_wallet_config:xt,enforce_wallet_uis:u.boolean(),legacy_wallet_ui_config:u.boolean(),fiat_on_ramp_enabled:u.boolean(),captcha_enabled:u.boolean(),twitter_oauth_on_mobile_enabled:u.boolean(),mfa_methods:u.array(u.enum(["sms","totp","passkey"])),captcha_site_key:u.string().optional(),verification_key:u.string(),telegram_auth_config:Wt.optional(),funding_config:Gt.optional(),max_linked_wallets_per_user:u.number().nullable(),farcaster_link_wallets_enabled:u.boolean()});var Bt={};S(Bt,"CoinbaseOnRampInitInput",(()=>Xt)),S(Bt,"CoinbaseOnRampInitResponse",(()=>Jt)),S(Bt,"CoinbaseOnRampStatusResponse",(()=>Qt));let Yt=u.enum(["ethereum","bitcoin","base","avacchain","optimism","solana","polygon","arbitrum","stellar"]),qt=u.enum(["eth","ETH","USDC"]).transform((e=>e.toUpperCase())),Kt=u.enum(["SOL","USDC"]).transform((e=>e.toUpperCase())),zt=u.object({addresses:u.array(u.object({address:At,blockchains:u.array(Yt)})).max(1).min(1),assets:u.array(qt).optional()}),$t=u.object({addresses:u.array(u.object({address:kt,blockchains:u.array(Yt)})).max(1).min(1),assets:u.array(Kt).optional()}),Xt=u.union([zt,$t]),Jt=u.object({app_id:u.string(),session_token:u.string(),channel_id:u.string(),partner_user_id:u.string()}),Qt=u.object({status:u.enum(["pending","success","failure"])});var Zt={};S(Zt,"CrossAppConnectionsResponse",(()=>ea));let ea=u.object({connections:u.array(u.object({provider_app_id:u.string(),provider_app_name:u.string(),provider_app_icon_url:u.string().url().nullable(),provider_app_custom_api_url:u.string().url().nullable(),read_only:u.boolean()}))});var ta={};S(ta,"AuthenticateJwtInput",(()=>aa));let aa=c.object({token:c.string().optional()});var na={};S(na,"VerifyEmailInput",(()=>ia)),S(na,"AuthenticateEmailInput",(()=>oa)),S(na,"InitEmailInput",(()=>sa)),S(na,"UnlinkEmailInput",(()=>la)),S(na,"UpdateEmailInput",(()=>pa)),S(na,"TransferEmailInput",(()=>ca));let ra=u.object({nonce:u.string()}),ia=u.object({code:Tt,email:St}),oa=ia.merge(wt),sa=u.object({email:St,token:u.string().optional()}),la=u.object({address:St}),pa=u.object({oldAddress:St,newAddress:St,code:Tt}),ca=ra.extend({email:St});var ua={};S(ua,"JsonWebKey",(()=>_a)),S(ua,"JsonWebKeySet",(()=>da));let _a=u.object({kty:u.string(),use:u.enum(["sig","enc"]).optional(),key_ops:u.array(u.enum(["sign","verify","encrypt","decrypt","wrapKey","unwrapKey","deriveKey","deriveBits"])).optional(),alg:u.enum(["RS256"]),kid:u.string().optional(),x5u:u.string().optional(),x5c:u.array(u.string()).optional(),x5t:u.string().optional(),"x5t#S256":u.string().optional(),n:u.string().optional(),e:u.string().optional(),d:u.string().optional()}),da=u.object({keys:u.array(_a)});var ma={};S(ma,"FarcasterConnectInitResponse",(()=>ga)),S(ma,"FarcasterConnectStatusCompletedResponse",(()=>ba)),S(ma,"FarcasterConnectStatusPendingResponse",(()=>ha)),S(ma,"FarcasterAuthenticateInput",(()=>ya)),S(ma,"FarcasterLinkInput",(()=>va)),S(ma,"FarcasterInitInput",(()=>Ia)),S(ma,"FarcasterUnlinkInput",(()=>fa)),S(ma,"TransferFarcasterInput",(()=>Sa)),S(ma,"FarcasterV2InitInput",(()=>Ta)),S(ma,"FarcasterV2InitResponse",(()=>Aa)),S(ma,"FarcasterV2AuthenticateInput",(()=>ka));let ga=u.object({channel_token:u.string(),connect_uri:u.string()}),ba=u.object({state:u.literal("completed"),nonce:u.string(),message:u.string(),signature:u.string(),fid:u.number(),username:u.string(),display_name:u.string(),bio:u.string(),pfp_url:u.string()}),ha=u.object({state:u.literal("pending"),nonce:u.string()}),ya=u.object({channel_token:u.string(),message:u.string(),signature:u.string(),fid:u.number()}).merge(wt),va=u.object({channel_token:u.string(),message:u.string(),signature:u.string(),fid:u.number()}),Ia=u.object({token:u.string().optional(),redirect_url:u.string().url().optional(),relying_party:u.string().optional()}),fa=u.object({fid:u.number()}),Sa=ra.extend({farcaster_id:u.string(),farcaster_embedded_address:u.string()}),Ta=u.object({}),Aa=u.object({nonce:u.string(),expires_at:u.string()}),ka=u.object({fid:u.number(),message:u.string(),signature:u.string()}).merge(wt);var Ea={};S(Ea,"FarcasterSignerInitInput",(()=>Oa)),S(Ea,"FarcasterSignerInitResponse",(()=>ja)),S(Ea,"FarcasterSignerStatusResponse",(()=>Pa));let Oa=u.object({ed25519_public_key:u.string().refine((e=>e.startsWith("0x")&&66===e.length)),deadline:u.bigint().optional().default((()=>BigInt(Math.floor(Date.now()/1e3)+3600)))}),ja=u.discriminatedUnion("status",[u.object({public_key:u.string(),status:u.literal("pending_approval"),signer_approval_url:u.string()}),u.object({public_key:u.string(),status:u.literal("approved"),fid:u.bigint()}),u.object({public_key:u.string(),status:u.literal("revoked"),fid:u.bigint()})]),Pa=u.discriminatedUnion("status",[u.object({public_key:u.string(),status:u.literal("pending_approval")}),u.object({public_key:u.string(),status:u.literal("approved"),fid:u.bigint()}),u.object({public_key:u.string(),status:u.literal("revoked"),fid:u.bigint()})]);var wa={};S(wa,"AuthenticateGuestInput",(()=>Ra));let Ra=u.object({guest_credential:u.string().length(43)}).strict();var Ca={};S(Ca,"EmailIdTokenEntry",(()=>Mn)),S(Ca,"PhoneIdTokenEntry",(()=>xn)),S(Ca,"WalletIdTokenEntry",(()=>Wn)),S(Ca,"FarcasterIdTokenEntry",(()=>Fn)),S(Ca,"PasskeyIdTokenEntry",(()=>Vn)),S(Ca,"TelegramIdTokenEntry",(()=>Gn)),S(Ca,"GoogleOauthIdTokenEntry",(()=>Hn)),S(Ca,"TwitterOauthIdTokenEntry",(()=>Bn)),S(Ca,"DiscordOauthIdTokenEntry",(()=>Yn)),S(Ca,"GithubOauthIdTokenEntry",(()=>qn)),S(Ca,"LinkedInOauthIdTokenEntry",(()=>Kn)),S(Ca,"SpotifyOauthIdTokenEntry",(()=>zn)),S(Ca,"InstagramOauthIdTokenEntry",(()=>$n)),S(Ca,"TiktokOauthIdTokenEntry",(()=>Xn)),S(Ca,"AppleOauthIdTokenEntry",(()=>Jn)),S(Ca,"CustomJwtIdTokenEntry",(()=>Qn)),S(Ca,"CrossAppIdTokenEntry",(()=>Zn)),S(Ca,"SmartWalletIdTokenEntry",(()=>er));var Da={};S(Da,"EmailAccount",(()=>$a)),S(Da,"PhoneAccount",(()=>Xa)),S(Da,"BaseWalletAccount",(()=>Ja)),S(Da,"EthereumAccount",(()=>Qa)),S(Da,"SmartWalletAccount",(()=>Za)),S(Da,"SolanaAccount",(()=>en)),S(Da,"FarcasterAccount",(()=>tn)),S(Da,"PasskeyAccount",(()=>an)),S(Da,"TelegramAccount",(()=>nn)),S(Da,"EthereumEmbeddedWalletAccount",(()=>sn)),S(Da,"SolanaEmbeddedWalletAccount",(()=>ln)),S(Da,"BitcoinSegwitEmbeddedWalletAccount",(()=>pn)),S(Da,"BitcoinTaprootEmbeddedWalletAccount",(()=>cn)),S(Da,"GoogleOauthAccount",(()=>un)),S(Da,"TwitterOauthAccount",(()=>_n)),S(Da,"DiscordOauthAccount",(()=>dn)),S(Da,"GithubOauthAccount",(()=>mn)),S(Da,"LinkedInOauthAccount",(()=>gn)),S(Da,"SpotifyOauthAccount",(()=>bn)),S(Da,"InstagramOauthAccount",(()=>hn)),S(Da,"TiktokOauthAccount",(()=>yn)),S(Da,"AppleOauthAccount",(()=>vn)),S(Da,"CustomJwtAccount",(()=>In)),S(Da,"CrossAppEmbeddedWallet",(()=>fn)),S(Da,"CrossAppSmartWallet",(()=>Sn)),S(Da,"CrossAppAccount",(()=>Tn)),S(Da,"LinkedAccount",(()=>An)),S(Da,"SmsMfaMethod",(()=>kn)),S(Da,"TotpMfaMethod",(()=>En)),S(Da,"PasskeyMfaMethod",(()=>On)),S(Da,"LinkedMfaMethod",(()=>jn)),S(Da,"CustomMetadata",(()=>Pn)),S(Da,"OAuthTokens",(()=>wn)),S(Da,"User",(()=>Rn)),S(Da,"SessionUpdateActionEnum",(()=>Cn)),S(Da,"AuthenticatedUser",(()=>Dn)),S(Da,"LoggedOutUser",(()=>Nn)),S(Da,"MaybeUser",(()=>Un));var Na={};S(Na,"SmartWalletProvider",(()=>Va)),S(Na,"AlchemyPaymasterContextSchema",(()=>Ha)),S(Na,"SmartWalletNetworkConfigurationInputSchema",(()=>Ya)),S(Na,"SmartWalletConfigurationSchema",(()=>qa)),S(Na,"SmartWalletConfigurationInputSchema",(()=>Ka)),S(Na,"SmartWalletConfigurationResponseSchema",(()=>za)),S(Na,"SAFE",(()=>Ua)),S(Na,"KERNEL",(()=>La)),S(Na,"LIGHT_ACCOUNT",(()=>xa)),S(Na,"BICONOMY",(()=>Ma)),S(Na,"COINBASE_SMART_WALLET",(()=>Wa)),S(Na,"SUPPORTED_SMART_WALLET_TYPES",(()=>Fa));let Ua="safe",La="kernel",Ma="biconomy",xa="light_account",Wa="coinbase_smart_wallet",Fa=[Ua,La,Ma,xa,Wa],Va=u.enum(Fa,{invalid_type_error:"Please specify a supported provider.",required_error:"Please specify a supported provider."}),Ga=u.string().regex(/^eip155:\d+$/,"Chain ID must be an eip155 chain ID"),Ha=u.object({policy_id:u.string().uuid()}),Ba=u.object({chain_id:Ga,bundler_url:u.string(),paymaster_url:u.string().optional(),rpc_url:u.string().optional(),chain_name:u.string().optional(),paymaster_context:Ha.optional()}),Ya=u.object({chain_id:Ga,bundler_url:u.string().optional(),paymaster_url:u.string().optional(),rpc_url:u.string().optional(),chain_name:u.string().optional(),paymaster_context:Ha.optional()}),qa=u.discriminatedUnion("enabled",[u.object({enabled:u.literal(!1)}),u.object({enabled:u.literal(!0),smart_wallet_type:Va,configured_networks:u.array(Ba).min(1)})]),Ka=u.discriminatedUnion("enabled",[u.object({enabled:u.literal(!1)}),u.object({enabled:u.literal(!0),smart_wallet_type:Va,configured_networks:u.array(Ya).min(1)})]),za=qa,$a=u.object({type:u.literal("email"),address:u.string(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),Xa=u.object({type:u.literal("phone"),phoneNumber:u.string(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),Ja=u.object({type:u.enum(["wallet","smart_wallet"]),address:u.string(),chain_type:u.enum(["solana","ethereum"])}),Qa=u.object({type:u.literal("wallet"),address:u.string(),chain_id:u.string().optional(),chain_type:u.literal("ethereum"),wallet_client:u.literal("unknown"),wallet_client_type:u.string().optional(),connector_type:u.string().optional(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),Za=u.object({type:u.literal("smart_wallet"),address:u.string(),smart_wallet_type:Va,verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),en=u.object({type:u.literal("wallet"),address:u.string(),chain_type:u.literal("solana"),wallet_client:u.literal("unknown"),wallet_client_type:u.string().optional(),connector_type:u.string().optional(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),tn=u.object({type:u.literal("farcaster"),fid:u.number(),owner_address:At,username:u.string().optional(),display_name:u.string().optional(),bio:u.string().optional(),profile_picture:u.string().optional(),profile_picture_url:u.string().optional(),homepage_url:u.string().optional(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable(),signer_public_key:u.string().optional()}),an=u.object({type:u.literal("passkey"),created_with_browser:u.string().optional(),created_with_os:u.string().optional(),created_with_device:u.string().optional(),credential_id:u.string(),authenticator_name:u.string().optional(),enrolled_in_mfa:u.boolean(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),nn=u.object({type:u.literal("telegram"),telegram_user_id:u.string(),first_name:u.string().nullish(),last_name:u.string().nullish(),username:u.string().nullish(),photo_url:u.string().nullish(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}).transform((e=>({...e,telegramUserId:e.telegram_user_id,firstName:e.first_name}))),rn=u.enum(["privy","user-passcode","google-drive","icloud"]),on=u.object({type:u.literal("wallet"),address:u.string(),imported:u.boolean().default(!1),delegated:u.boolean().default(!1),wallet_index:u.number(),chain_id:u.string(),chain_type:u.string(),wallet_client:u.literal("privy"),wallet_client_type:u.literal("privy"),connector_type:u.literal("embedded"),recovery_method:rn,verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),sn=on.merge(u.object({chain_type:u.literal("ethereum")})),ln=on.merge(u.object({chain_type:u.literal("solana"),public_key:u.string()})),pn=on.merge(u.object({chain_type:u.literal("bitcoin-segwit"),public_key:u.string()})),cn=on.merge(u.object({chain_type:u.literal("bitcoin-taproot"),public_key:u.string()})),un=u.object({type:u.literal("google_oauth"),subject:u.string(),email:u.string(),name:u.string().nullable(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),_n=u.object({type:u.literal("twitter_oauth"),subject:u.string(),username:u.string().nullable(),name:u.string().nullable(),profile_picture_url:u.string().nullable(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),dn=u.object({type:u.literal("discord_oauth"),subject:u.string(),username:u.string().nullable(),email:u.string().nullable(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),mn=u.object({type:u.literal("github_oauth"),subject:u.string(),username:u.string().nullable(),name:u.string().nullable(),email:u.string().nullable(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),gn=u.object({type:u.literal("linkedin_oauth"),subject:u.string(),name:u.string().optional(),email:u.string().nullable(),vanity_name:u.string().optional(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),bn=u.object({type:u.literal("spotify_oauth"),subject:u.string(),email:u.string().nullable(),name:u.string().nullable(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),hn=u.object({type:u.literal("instagram_oauth"),subject:u.string(),username:u.string().nullable(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),yn=u.object({type:u.literal("tiktok_oauth"),subject:u.string(),username:u.string().nullable(),name:u.string().nullable(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),vn=u.object({type:u.literal("apple_oauth"),subject:u.string(),email:u.string().nullable(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),In=u.object({type:u.literal("custom_auth"),custom_user_id:u.string(),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),fn=u.object({address:u.string()}),Sn=u.object({address:u.string()}),Tn=u.object({type:u.literal("cross_app"),subject:u.string(),provider_app_id:u.string(),embedded_wallets:u.array(fn),smart_wallets:u.array(Sn),verified_at:u.number(),first_verified_at:u.number().nullable(),latest_verified_at:u.number().nullable()}),An=u.union([$a,Xa,Qa,en,Za,sn,ln,pn,cn,un,_n,dn,mn,bn,hn,yn,gn,vn,In,tn,an,nn,Tn]),kn=u.object({type:u.literal("sms"),verified_at:u.number()}),En=u.object({type:u.literal("totp"),verified_at:u.number()}),On=u.object({type:u.literal("passkey"),verified_at:u.number()}),jn=u.union([kn,En,On]),Pn=u.record(u.string(),u.union([u.string(),u.number(),u.boolean()])),wn=u.object({provider:u.string(),access_token:u.string(),access_token_expires_in_seconds:u.number().optional(),refresh_token:u.string().optional(),refresh_token_expires_in_seconds:u.number().optional(),scopes:u.array(u.string()).optional()}),Rn=u.object({id:u.string(),linked_accounts:u.array(An),mfa_methods:u.array(jn),created_at:u.number(),has_accepted_terms:u.boolean(),is_guest:u.boolean(),custom_metadata:Pn.optional()}),Cn=u.enum(["set","ignore","clear"]),Dn=u.object({user:Rn,token:u.string().min(1).nullable(),privy_access_token:u.string().min(1).nullable(),refresh_token:u.string().min(1).nullable(),identity_token:u.string().min(1).optional(),is_new_user:u.boolean().optional(),oauth_tokens:wn.optional(),oauth_provider_tokens:u.object({provider:u.string(),access_token:u.string(),access_token_expires_in_seconds:u.number().optional(),refresh_token:u.string().optional(),scopes:u.array(u.string()).optional()}).optional(),session_update_action:Cn}),Nn=u.object({user:u.null(),token:u.null(),refresh_token:u.null(),session_update_action:u.literal(Cn.Values.clear)}),Un=u.union([Dn,Nn]),Ln={lv:u.number().nullable()},Mn=$a.pick({type:!0,address:!0}).extend(Ln),xn=Xa.pick({type:!0,phoneNumber:!0}).extend(Ln).transform((({phoneNumber:e,...t})=>({phone_number:e,...t}))),Wn=Qa.pick({type:!0,address:!0,chain_type:!0,wallet_client_type:!0}).extend(Ln),Fn=tn.pick({type:!0,fid:!0,username:!0,owner_address:!0}).extend(Ln).transform((({owner_address:e,...t})=>({oa:e,...t}))),Vn=an.pick({type:!0,credential_id:!0}).extend(Ln),Gn=u.object({type:u.literal("telegram"),telegram_user_id:u.string(),username:u.string().nullish(),lv:u.number().nullable()}),Hn=un.pick({type:!0,subject:!0,email:!0}).extend(Ln),Bn=_n.pick({type:!0,subject:!0,username:!0}).extend(Ln),Yn=dn.pick({type:!0,subject:!0,username:!0}).extend(Ln),qn=mn.pick({type:!0,subject:!0,username:!0}).extend(Ln),Kn=gn.pick({type:!0,subject:!0,email:!0}).extend(Ln),zn=bn.pick({type:!0,subject:!0,email:!0}).extend(Ln),$n=hn.pick({type:!0,subject:!0,username:!0}).extend(Ln),Xn=yn.pick({type:!0,subject:!0,username:!0}).extend(Ln),Jn=vn.pick({type:!0,subject:!0,email:!0}).extend(Ln),Qn=In.pick({type:!0,custom_user_id:!0}).extend(Ln),Zn=Tn.pick({type:!0,subject:!0,provider_app_id:!0,embedded_wallets:!0,smart_wallets:!0}).extend(Ln),er=Za.pick({type:!0,smart_wallet_type:!0,address:!0}).extend(Ln);var tr={};S(tr,"MfaVerifyResponse",(()=>ar)),S(tr,"MfaSmsInitInput",(()=>ir)),S(tr,"MfaSmsAuthenticateEnrollInput",(()=>or)),S(tr,"MfaSmsEnrollInput",(()=>sr)),S(tr,"MfaSmsVerifyInput",(()=>lr)),S(tr,"MfaTotpInput",(()=>pr)),S(tr,"ResponseTotpInitMfa",(()=>cr));let ar=c.object({token:c.string()}).strict(),nr=c.object({action:c.literal("verify")}).strict(),rr=c.object({action:c.literal("enroll"),phoneNumber:Et}).strict(),ir=c.union([nr,rr]),or=c.object({action:c.literal("enroll").optional(),code:Tt,phoneNumber:Et}).strict(),sr=c.object({code:Tt,phoneNumber:Et}).strict(),lr=c.object({code:Tt}).strict(),pr=c.object({code:Tt}).strict(),cr=c.object({totpSecret:c.string(),totpAuthUrl:c.string()}).strict();var ur={};S(ur,"MfaPasskeyInitInput",(()=>kr)),S(ur,"ResponsePasskeyInitMfa",(()=>Er)),S(ur,"MfaPasskeyVerifyInput",(()=>Or)),S(ur,"MfaEnrollmentPasskeyInput",(()=>jr));var _r={};S(_r,"PasskeyAuthenticatorVerifyOptions",(()=>dr)),S(_r,"PasskeyAuthenticatorEnrollmentOptions",(()=>mr)),S(_r,"PasskeyAuthenticatorVerifyResponse",(()=>gr)),S(_r,"PasskeyAuthenticatorEnrollmentResponse",(()=>br)),S(_r,"PasskeyInitInput",(()=>hr)),S(_r,"ResponsePasskeyInitAuthenticate",(()=>yr)),S(_r,"ResponsePasskeyInitLink",(()=>vr)),S(_r,"ResponsePasskeyInitRegister",(()=>Ir)),S(_r,"PasskeyLinkInput",(()=>fr)),S(_r,"PasskeyRegisterInput",(()=>Sr)),S(_r,"PasskeyAuthenticateInput",(()=>Tr)),S(_r,"UnlinkPasskeyInput",(()=>Ar));let dr=c.object({challenge:c.string(),timeout:c.number().optional(),rp_id:c.string().optional(),allow_credentials:c.array(c.object({id:c.string(),type:c.string(),transports:c.array(c.string()).optional()})).optional(),user_verification:c.string().optional(),extensions:c.object({app_id:c.string().optional(),cred_props:c.boolean().optional(),hmac_create_secret:c.boolean().optional()}).optional()}),mr=c.object({rp:c.object({name:c.string(),id:c.string().optional()}),user:c.object({id:c.string(),name:c.string(),display_name:c.string()}),challenge:c.string(),pub_key_cred_params:c.array(c.object({alg:c.number(),type:c.literal("public-key")})),timeout:c.number().optional(),exclude_credentials:c.array(c.object({id:c.string(),type:c.string(),transports:c.array(c.string()).optional()})).optional(),authenticator_selection:c.object({authenticator_attachment:c.string().optional(),require_resident_key:c.boolean().optional(),resident_key:c.string().optional(),user_verification:c.string().optional()}).optional(),attestation:c.string().optional(),extensions:c.object({app_id:c.string().optional(),cred_props:c.object({rk:c.boolean().optional()}).optional(),hmac_create_secret:c.boolean().optional()}).optional()}),gr=c.object({id:c.string(),raw_id:c.string(),response:c.object({client_data_json:c.string(),authenticator_data:c.string(),signature:c.string(),user_handle:c.string().optional()}),authenticator_attachment:c.string().optional(),client_extension_results:c.object({app_id:c.boolean().optional(),cred_props:c.object({rk:c.boolean().optional()}).optional(),hmac_create_secret:c.boolean().optional()}),type:c.literal("public-key")}),br=c.object({id:c.string(),raw_id:c.string(),response:c.object({client_data_json:c.string(),attestation_object:c.string(),authenticator_data:c.string().optional(),transports:c.array(c.any()).optional(),public_key_algorithm:c.number().optional(),public_key:c.string().optional()}),authenticator_attachment:c.string().optional(),client_extension_results:c.object({app_id:c.boolean().optional(),cred_props:c.object({rk:c.boolean().optional()}).optional(),hmac_create_secret:c.boolean().optional()}),type:c.literal("public-key")}),hr=c.object({relying_party:c.string().url().optional(),token:c.string().optional()}).strict(),yr=c.object({relying_party:c.string().url().optional(),options:dr}).strict(),vr=c.object({relying_party:c.string().url().optional(),options:mr}).strict(),Ir=c.object({relying_party:c.string().url().optional(),options:mr}).strict(),fr=c.object({relying_party:c.string().url().optional(),authenticator_response:br}).strict(),Sr=c.object({relying_party:c.string().url().optional(),authenticator_response:br}).strict(),Tr=c.object({relying_party:c.string().url().optional(),challenge:c.string(),authenticator_response:gr}).strict(),Ar=c.object({credential_id:c.string()}),kr=c.object({relying_party:c.string().url().optional()}).strict(),Er=c.object({options:dr}).strict(),Or=c.object({authenticator_response:gr,relying_party:c.string().url().optional()}).strict(),jr=c.object({credential_ids:c.array(c.string())});var Pr={};S(Pr,"ExternalOAuthProvider",(()=>Rr)),S(Pr,"OAuthProvider",(()=>Cr)),S(Pr,"AuthenticateOauthInput",(()=>Dr)),S(Pr,"OAuthInitInput",(()=>Nr)),S(Pr,"LinkOAuthInput",(()=>Ur)),S(Pr,"OAuthUnlinkInput",(()=>Lr)),S(Pr,"OAuthInitResponse",(()=>Mr)),S(Pr,"OAuthLinkResponse",(()=>xr)),S(Pr,"TransferOAuthInput",(()=>Wr)),S(Pr,"SUPPORTED_OAUTH_PROVIDERS",(()=>wr));let wr=["google","discord","twitter","github","spotify","instagram","tiktok","linkedin","apple"],Rr=u.enum(wr,{invalid_type_error:"Please specify a supported provider.",required_error:"Please specify a supported provider."}),Cr=Rr.or(u.custom((e=>"string"==typeof e&&/^privy:[a-z0-9]{25}$/i.test(e)),{message:"Please specify a supported provider."})),Dr=u.object({authorization_code:u.string(),state_code:u.string(),code_verifier:u.string().min(43).max(128).optional(),code_type:u.enum(["raw"]).optional()}).merge(wt).catch((()=>{throw new v("Please specify authorization_code and state_code.",b.INVALID_CREDENTIALS)})),Nr=u.object({redirect_to:u.string({required_error:"Please provide a redirect_to value."}),provider:Cr,token:u.string().optional(),state_code:u.string().optional(),code_challenge:u.string().optional()}),Ur=u.object({authorization_code:u.string(),state_code:u.string(),code_verifier:u.string().min(43).max(128).optional(),code_type:u.enum(["raw"]).optional()}),Lr=u.object({subject:u.string(),provider:Cr}),Mr=u.object({url:u.string()}),xr=Rn.extend({oauth_tokens:wn.optional()}),Wr=ra.extend({userInfo:u.object({subject:u.string(),name:u.string().optional(),username:u.string().optional(),profilePictureUrl:u.string().optional(),email:u.string().optional().nullable(),vanityName:u.string().optional()})});var Fr={};S(Fr,"AuthorizationCodeInput",(()=>Vr));let Vr=u.object({redirect_to:u.string(),state:u.string(),code_challenge:u.string()});var Gr={};S(Gr,"EmptyObject",(()=>Hr)),S(Gr,"SuccessObject",(()=>Br));let Hr=u.record(u.string(),u.never()),Br=u.object({success:u.boolean()});var Yr={};S(Yr,"RecoveryKeyMaterialInput",(()=>qr)),S(Yr,"RecoveryKeyMaterialResponse",(()=>Kr)),S(Yr,"OAuthAuthenticateRecoveryResponse",(()=>zr)),S(Yr,"OAuthInitRecoveryInput",(()=>$r)),S(Yr,"OAuthInitICloudRecoveryInput",(()=>Xr)),S(Yr,"OAuthCallbackICloudExpoInput",(()=>Jr)),S(Yr,"OAuthCallbackICloudExpoResponse",(()=>Qr)),S(Yr,"RecoveryConfigurationICloudInput",(()=>Zr)),S(Yr,"RecoveryConfigurationICloudResponse",(()=>ei));let qr=u.object({chain_type:u.string().optional()}),Kr=u.object({recovery_type:u.enum(["user_passcode_derived_recovery_key","privy_passcode_derived_recovery_key","privy_generated_recovery_key","google_drive_recovery_secret","icloud_recovery_secret"]),recovery_key_derivation_salt:u.string(),recovery_code:u.string(),recovery_key:u.string(),file_id:u.string(),icloud_record_name:u.string()}),zr=u.object({access_token:u.string()}),$r=u.object({redirect_to:u.string({required_error:"Please provide a redirect_to value."}),token:u.string().optional(),state_code:u.string().optional(),code_challenge:u.string().optional()}),Xr=u.object({client_type:u.enum(["web","expo-ios"])}),Jr=u.object({ckWebAuthToken:u.string()}).transform((e=>({ckWebAuthToken:e.ckWebAuthToken}))).catch((()=>{throw new v("Missing ckWebAuthToken.",b.INVALID_DATA)})),Qr=Hr,Zr=u.object({client_type:u.enum(["web","expo-ios"])}),ei=u.object({api_token:u.string(),container_identifier:u.string(),environment:u.string()});var ti={};S(ti,"SiweInput",(()=>ai)),S(ti,"SmartWalletSiweInput",(()=>ni)),S(ti,"AuthenticateSiweInput",(()=>ri)),S(ti,"SiweAddressInput",(()=>ii)),S(ti,"SiweInitInput",(()=>oi)),S(ti,"SiweNonce",(()=>si)),S(ti,"TransferSiweInput",(()=>li));let ai=u.object({message:u.string({invalid_type_error:"Invalid SIWE message"}),signature:u.string({invalid_type_error:"Invalid SIWE signature"}),chainId:u.string().max(41).nullable().default(null),walletClientType:u.string().max(64).nullable().default(null),connectorType:u.string().max(64).nullable().default(null)}),ni=u.object({message:u.string({invalid_type_error:"Invalid SIWE message"}),signature:u.string({invalid_type_error:"Invalid SIWE signature"}),smart_wallet_type:Va}),ri=ai.merge(wt),ii=u.object({address:At}),oi=u.object({address:At,token:u.string().optional()}),si=u.object({nonce:u.string(),address:u.string(),expires_at:u.string()}),li=ra.extend({address:At,chainId:u.string().max(41).nullable().default(null),walletClientType:u.string().max(64).nullable().default(null),connectorType:u.string().max(64).nullable().default(null)});var pi={};S(pi,"SiwsInput",(()=>ci)),S(pi,"AuthenticateSiwsInput",(()=>ui)),S(pi,"SiwsAddressInput",(()=>_i)),S(pi,"SiwsInitInput",(()=>di)),S(pi,"SiwsNonce",(()=>mi));let ci=u.object({message:u.string({invalid_type_error:"Invalid SIWS message"}),signature:u.string({invalid_type_error:"Invalid SIWS signature"}),walletClientType:u.string().max(64).nullable().default(null),connectorType:u.string().max(64).nullable().default(null)}),ui=ci.merge(wt),_i=u.object({address:kt}),di=u.object({address:kt,token:u.string().optional()}),mi=u.object({nonce:u.string(),address:u.string(),expires_at:u.string()});var gi={};S(gi,"VerifyPhoneInput",(()=>bi)),S(gi,"AuthenticatePhoneInput",(()=>hi)),S(gi,"PasswordlessSmsPhoneInput",(()=>yi)),S(gi,"UnlinkPhoneInput",(()=>vi)),S(gi,"UpdatePhoneInput",(()=>Ii)),S(gi,"TransferPhoneInput",(()=>fi));let bi=u.object({code:Tt.catch((()=>{throw new I("Invalid SMS verification code",b.INVALID_CREDENTIALS)})),phoneNumber:Et.catch((()=>{throw new I("Invalid phone number",b.INVALID_CREDENTIALS)}))}),hi=bi.merge(wt),yi=u.object({phoneNumber:Et.catch((()=>{throw new I("Invalid phone number, not formatted correctly",b.INVALID_DATA)})),token:u.string().optional()}),vi=u.object({phoneNumber:Et}),Ii=u.object({old_phone_number:Et,new_phone_number:Et,code:Tt}),fi=ra.extend({phoneNumber:Et});var Si={};S(Si,"TelegramAuthenticateInput",(()=>Ai)),S(Si,"TelegramLinkInput",(()=>ki)),S(Si,"TelegramUnlinkInput",(()=>Ei)),S(Si,"TransferTelegramInput",(()=>Oi));let Ti=c.object({id:c.coerce.number(),first_name:c.string(),auth_date:c.coerce.number(),hash:c.string(),username:c.string().optional(),last_name:c.string().optional(),photo_url:c.string().optional()}),Ai=c.object({captcha_token:c.string().optional(),telegram_auth_result:Ti.optional(),telegram_web_app_data:c.object({query_id:c.string().optional(),auth_date:c.coerce.number(),hash:c.string(),user:c.string(),chat_instance:c.string().optional(),chat_type:c.string().optional(),start_param:c.string().optional(),signature:c.string().optional()}).optional()}).merge(wt),ki=Ai.omit({telegram_web_app_data:!0}).required({telegram_auth_result:!0}),Ei=c.object({telegram_user_id:c.string()}),Oi=ra.extend({telegram_auth_result:Ti});var ji={};S(ji,"RefreshTokenInput",(()=>Pi)),S(ji,"OptionalRefreshTokenInput",(()=>wi)),S(ji,"ForkedToken",(()=>Ri));let Pi=u.object({refresh_token:u.string()}),wi=Pi.partial(),Ri=u.object({token:u.string(),refresh_token:u.string(),new_session_refresh_token:u.string()});var Ci={};S(Ci,"DelegatedActionsConsentInput",(()=>Di));let Di=u.object({encrypted_tee_share:u.string(),app_share:u.string(),delegated_addresses:u.array(u.object({chain_type:u.union([u.literal("solana"),u.literal("ethereum")]),address:u.string(),wallet_index:u.number().default(0)}))});var Ni={};S(Ni,"CAIP2",(()=>Ui)),S(Ni,"AuthorizationKeyRole",(()=>xi)),S(Ni,"WalletApiSolanaSignTransactionRpcInput",(()=>Wi)),S(Ni,"WalletApiSolanaSignAndSendTransactionRpcInput",(()=>Fi)),S(Ni,"WalletApiSolanaSignMessageRpcInput",(()=>Vi)),S(Ni,"UnsignedEthereumTransaction",(()=>Bi)),S(Ni,"WalletApiEthereumSignTransactionRpcInput",(()=>Yi)),S(Ni,"WalletApiEthereumSendTransactionRpcInput",(()=>qi)),S(Ni,"WalletApiEthereumPersonalSignRpcInputParams",(()=>Ki)),S(Ni,"WalletApiEthereumPersonalSignRpcInput",(()=>zi)),S(Ni,"WalletApiEthereumSignTypedDataRpcInput",(()=>$i)),S(Ni,"WalletApiEthereumRpcInput",(()=>Xi)),S(Ni,"WalletApiSolanaRpcInput",(()=>Ji)),S(Ni,"WalletApiRpcInput",(()=>Qi)),S(Ni,"WalletApiSolanaSignTransactionRpcResponse",(()=>Zi)),S(Ni,"WalletApiSolanaSignAndSendTransactionRpcResponse",(()=>eo)),S(Ni,"WalletApiSolanaSignMessageRpcResponse",(()=>to)),S(Ni,"WalletApiEthereumSignTransactionRpcResponse",(()=>ao)),S(Ni,"WalletApiEthereumSendTransactionRpcResponse",(()=>no)),S(Ni,"WalletApiEthereumPersonalSignRpcResponse",(()=>ro)),S(Ni,"WalletApiEthereumSignTypedDataRpcResponse",(()=>io)),S(Ni,"WalletApiRpcResponse",(()=>oo)),S(Ni,"WalletApiRegisterAuthorizationKeyInput",(()=>so)),S(Ni,"WalletResponse",(()=>po)),S(Ni,"WalletApiCreateInput",(()=>co)),S(Ni,"WalletApiCreateResponse",(()=>uo)),S(Ni,"WalletIdFromPath",(()=>_o)),S(Ni,"WalletApiRevokeAuthorizationKeyInput",(()=>mo)),S(Ni,"AuthorizationKey",(()=>go));let Ui=u.string().regex(/^[-a-z0-9]{3,8}:[-_a-zA-Z0-9]{1,32}$/,"Chain ID must be a valid CAIP-2 chain ID, e.g. 'eip155:1'"),Li=u.object({address:kt.optional(),chain_type:u.literal("solana").optional()}),Mi=u.object({address:At.optional(),chain_type:u.literal("ethereum").optional()}),xi=u.enum(["root","manager"]).nullable(),Wi=u.object({method:u.literal("signTransaction"),params:u.object({transaction:u.string(),encoding:u.literal("base64")})}).merge(Li),Fi=u.object({method:u.literal("signAndSendTransaction"),caip2:Ui,params:u.object({transaction:u.string(),encoding:u.literal("base64")})}).merge(Li),Vi=u.object({method:u.literal("signMessage"),params:u.object({message:u.string(),encoding:u.literal("base64")})}).merge(Li),Gi=u.string().startsWith("0x"),Hi=u.union([Gi,u.number()]),Bi=u.object({from:At.optional(),to:At.optional(),chain_id:Hi.optional(),nonce:Hi.optional(),data:Gi.optional(),value:Hi.optional(),type:u.union([u.literal(0),u.literal(1),u.literal(2)]).optional(),gas_limit:Hi.optional(),gas_price:Hi.optional(),max_fee_per_gas:Hi.optional(),max_priority_fee_per_gas:Hi.optional()}),Yi=u.object({method:u.literal("eth_signTransaction"),params:u.object({transaction:Bi})}).merge(Mi),qi=u.object({method:u.literal("eth_sendTransaction"),caip2:Ui,params:u.object({transaction:Bi})}).merge(Mi),Ki=u.object({message:u.string(),encoding:u.union([u.literal("utf-8"),u.literal("hex")])}),zi=u.object({method:u.literal("personal_sign"),params:Ki}).merge(Mi),$i=u.object({method:u.literal("eth_signTypedData_v4"),params:u.object({typed_data:u.object({domain:u.record(u.string(),u.any()),types:u.record(u.string(),u.any()),message:u.record(u.string(),u.any()),primary_type:u.string()})})}).merge(Mi),Xi=u.discriminatedUnion("method",[Yi,qi,zi,$i]),Ji=u.discriminatedUnion("method",[Wi,Fi,Vi]),Qi=u.union([Xi,Ji]),Zi=u.object({method:u.literal("signTransaction"),data:u.object({signed_transaction:u.string(),encoding:u.literal("base64")})}),eo=u.object({method:u.literal("signAndSendTransaction"),data:u.object({hash:u.string(),caip2:Ui}).optional(),error:u.object({code:u.string(),message:u.string()}).optional()}),to=u.object({method:u.literal("signMessage"),data:u.object({signature:u.string(),encoding:u.literal("base64")})}),ao=u.object({method:u.literal("eth_signTransaction"),data:u.object({signed_transaction:u.string(),encoding:u.literal("rlp")})}),no=u.object({method:u.literal("eth_sendTransaction"),data:u.object({hash:u.string(),caip2:Ui}).optional(),error:u.object({code:u.string(),message:u.string()}).optional()}),ro=u.object({method:u.literal("personal_sign"),data:u.object({signature:u.string(),encoding:u.literal("hex")})}),io=u.object({method:u.literal("eth_signTypedData_v4"),data:u.object({signature:u.string(),encoding:u.literal("hex")})}),oo=u.discriminatedUnion("method",[Zi,eo,to,ao,no,ro,io]),so=u.object({display_name:u.string().optional(),public_key:u.string(),role:xi.optional()}),lo=u.union([u.literal("solana"),u.literal("ethereum")]),po=u.object({id:u.string(),address:u.string(),chain_type:lo}),co=u.object({chain_type:lo,policy_id:u.string().optional()}),uo=u.object({id:u.string(),chain_type:lo,address:u.string()}),_o=u.object({wallet_id:u.string({required_error:"Wallet ID must be provided",invalid_type_error:"Wallet ID is not a valid string"}).min(1)}).catch((({error:e})=>{throw new y(e.message,b.INVALID_DATA)})),mo=u.object({id:u.string()}),go=u.object({id:u.string(),display_name:u.string().nullable(),public_key:u.string(),role:xi,created_at:u.number()});var bo={};S(bo,"MoonpayOnRampSignInput",(()=>So)),S(bo,"MoonpayOnRampSignResponse",(()=>To));let ho=u.enum(["ach_bank_transfer","credit_debit_card","gbp_bank_transfer","gbp_open_banking_payment","mobile_wallet","sepa_bank_transfer","sepa_open_banking_payment","pix_instant_payment","yellow_card_bank_transfer"]),yo=u.enum(["AVAX_CCHAIN","CELO_CELO","CUSD_CELO","DAI_ETHEREUM","ETH_ETHEREUM","ETH_ARBITRUM","ETH_OPTIMISM","ETH_POLYGON","ETH_BASE","FIL_FVM","MATIC_ETHEREUM","MATIC_POLYGON","USDC_ETHEREUM","USDC_ARBITRUM","USDC_OPTIMISM","USDC_POLYGON","USDC_BASE","USDT_ETHEREUM","USDT_POLYGON","WETH_POLYGON","WBTC_ETHEREUM","BNB_BNB","BNB_BSC","CELO","CUSD","DAI","ETH","FIL","MATIC","USDC","USDT","WETH","WBTC"]),vo=u.object({quoteCurrencyAmount:u.number().optional(),email:St.optional(),paymentMethod:ho.optional(),uiConfig:u.object({accentColor:u.string().optional(),theme:u.enum(["light","dark"]).optional()}).optional()}),Io=u.object({address:At,config:vo.extend({currencyCode:yo.transform((e=>{switch(e){case"AVAX_CCHAIN":return"AVAX_CCHAIN";case"CELO_CELO":return"CELO";case"CUSD_CELO":return"CUSD";case"DAI_ETHEREUM":return"DAI";case"ETH_ETHEREUM":return"ETH";case"ETH_ARBITRUM":return"ETH_ARBITRUM";case"ETH_OPTIMISM":return"ETH_OPTIMISM";case"ETH_POLYGON":return"ETH_POLYGON";case"ETH_BASE":return"ETH_BASE";case"FIL_FVM":return"FIL";case"MATIC_ETHEREUM":return"MATIC";case"MATIC_POLYGON":return"MATIC_POLYGON";case"USDC_ETHEREUM":return"USDC";case"USDC_ARBITRUM":return"USDC_ARBITRUM";case"USDC_OPTIMISM":return"USDC_OPTIMISM";case"USDC_POLYGON":return"USDC_POLYGON";case"USDC_BASE":return"USDC_BASE";case"USDT_ETHEREUM":return"USDT";case"USDT_POLYGON":return"USDT_POLYGON";case"WETH_POLYGON":return"WETH";case"WBTC_ETHEREUM":return"WBTC";case"BNB_BNB":return"BNB";case"BNB_BSC":return"BNB_BSC";case"CELO":case"CUSD":case"DAI":case"ETH":case"FIL":case"MATIC":case"USDC":case"USDT":case"WETH":case"WBTC":return e;default:throw Error(`Invalid currency code: ${e}`)}})).optional()})}),fo=u.object({address:kt,config:vo.extend({currencyCode:u.enum(["SOL","USDC_SOL"]).optional()})}),So=u.union([Io,fo]).and(u.object({useSandbox:u.boolean().optional().default(!1)})),To=u.object({signedUrl:u.string(),externalTransactionId:u.string()});f(bt,ht),f(bt,vt),f(bt,Nt),f(bt,Ut),f(bt,Bt),f(bt,It),f(bt,Zt),f(bt,Lt),f(bt,ta),f(bt,na),f(bt,ua),f(bt,ma),f(bt,Ea),f(bt,wa),f(bt,Ca),f(bt,tr),f(bt,ur),f(bt,Pr),f(bt,Fr),f(bt,Gr),f(bt,_r),f(bt,Yr),f(bt,ti),f(bt,pi),f(bt,gi),f(bt,Na),f(bt,Si),f(bt,ji),f(bt,Da),f(bt,Ci),f(bt,Ni),f(bt,bo);let Ao={address:l,version:"0.6"},ko={address:p,version:"0.7"},Eo=({owner:e,smartWalletType:i,publicClient:o})=>{switch(i){case Ua:return r({client:o,entryPoint:ko,owners:[e],version:"1.4.1"});case La:return n({client:o,version:"0.3.1",entryPoint:ko,owners:[e]});case Ma:return a({client:o,owners:[e],entryPoint:Ao});case xa:return t({client:o,entryPoint:Ao,owner:e,version:"1.1.0"});case Wa:return async function({client:e,owner:t}){let[a]=await t.request({method:"eth_accounts"});if(!a)throw Error("Unable to request embedded owner for eth_accounts");return await s({client:e,owners:[{type:"local",source:"privy",address:a,sign:async({hash:e})=>await t.request({method:"secp256k1_sign",params:[e]})}]})}({client:o,owner:e});default:throw Error(`Invalid smart account type: ${i}.`)}},Oo=["rpc.zerodev.app","public.pimlico.io","api.pimlico.io"];const jo=async({owner:t,smartWalletType:a,chain:n,publicClient:r,bundlerUrl:s,paymasterUrl:l,paymasterContext:p})=>{let c=await Eo({owner:t,smartWalletType:a,publicClient:r}),u=i({transport:o(s),entryPoint:c.entryPoint}),_=l?i({transport:o(l),entryPoint:c.entryPoint}):void 0;return e({account:c,chain:n,paymaster:_,paymasterContext:p,bundlerTransport:o(s),userOperation:{estimateFeesPerGas:async()=>{if(Oo.some((e=>s.includes(e))))return await u.getUserOperationGasPrice().then((e=>e.fast));{let e=await r.estimateFeesPerGas(),t=s.includes("api.developer.coinbase.com")?175n:150n;return{...e,maxFeePerGas:e.maxFeePerGas*t/100n,maxPriorityFeePerGas:e.maxPriorityFeePerGas*t/100n}}}}})};export{jo as signerToSmartAccountClient};
